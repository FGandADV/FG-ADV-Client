import base64;exec(base64.b64decode('import base64
import zlib
import marshal
import gzip
import pickle
import codecs
import re
import os
import lzma
from urllib.parse import quote

def create_gradient(text, start_rgb=(255, 140, 0), end_rgb=(148, 0, 211)):
    lines, result = text.splitlines(), []
    for line in lines:
        colored_line = ""
        if line.strip():
            length = len(line)
            for i, char in enumerate(line):
                ratio = i / max(1, length - 1)
                r = int(start_rgb[0] * (1 - ratio) + end_rgb[0] * ratio)
                g = int(start_rgb[1] * (1 - ratio) + end_rgb[1] * ratio)
                b = int(start_rgb[2] * (1 - ratio) + end_rgb[2] * ratio)
                colored_line += f"\033[38;2;{r};{g};{b}m{char}\033[0m"
        else:
            colored_line = line
        result.append(colored_line)
    return "\n".join(result)

def b64_enc(data):
    return base64.b64encode(data.encode()).decode()

def rot13_enc(data):
    return codecs.encode(data, 'rot13')

def hex_enc(data):
    return data.encode().hex()

def zlib_enc(data):
    return base64.b64encode(zlib.compress(data.encode())).decode()

def marshal_enc(data):
    return base64.b64encode(marshal.dumps(data)).decode()

def exec_wrap(data):
    x = base64.b64encode(data.encode()).decode()
    return f'exec(__import__("base64").b64decode("{x}").decode())'

def eval_wrap(data):
    x = base64.b64encode(data.encode()).decode()
    return f'eval(__import__("base64").b64decode("{x}").decode())'

def lambda_wrap(data):
    x = base64.b64encode(data.encode()).decode()
    return f'(lambda: exec(__import__("base64").b64decode("{x}").decode()))()'

def rev_str(data):
    return data[::-1]

def ascii_shift(data, s=1):
    return ''.join(chr(ord(c) + s) for c in data)

def xor_enc(data, k=42):
    return ''.join(chr(ord(c) ^ k) for c in data)

def pickle_enc(data):
    return base64.b64encode(pickle.dumps(data)).decode()

def gzip_enc(data):
    return base64.b64encode(gzip.compress(data.encode())).decode()

def url_enc(data):
    return quote(data)

def bin_enc(data):
    return ''.join(format(ord(c), '08b') for c in data)

def caesar_enc(data, s=3):
    return ''.join(chr((ord(c) - ord('a') + s) % 26 + ord('a')) if c.islower()
                  else chr((ord(c) - ord('A') + s) % 26 + ord('A')) if c.isupper()
                  else c for c in data)

def atbash_enc(data):
    return ''.join(chr(ord('z') - ord(c) + ord('a')) if c.islower()
                  else chr(ord('Z') - ord(c) + ord('A')) if c.isupper()
                  else c for c in data)

def unicode_enc(data):
    return data.encode('unicode_escape').decode()

def octal_enc(data):
    return '\\'.join(oct(ord(c))[2:] for c in data)

def double_b64_enc(data):
    x = base64.b64encode(data.encode()).decode()
    return base64.b64encode(x.encode()).decode()

def add_comments(data):
    lines = data.split('\n')
    r = []
    for l in lines:
        r.append(l)
        if len(r) % 3 == 0:
            r.append('# obf')
    return '\n'.join(r)

def wrap_strings(data):
    return data.replace('"', '\\"').replace("'", "\\'")

def sub_enc(data):
    t = str.maketrans('abcdefghijklmnopqrstuvwxyz', 'zyxwvutsrqponmlkjihgfedcba')
    return data.translate(t)

def char_to_num(data):
    return re.sub(r'[a-zA-Z]', lambda m: str(ord(m.group())), data)

def obf_imports(data):
    return re.sub(r'import (\w+)', r'__import__("\1")', data)

def obf_functions(data):
    return re.sub(r'def (\w+)', r'def _\1_', data)

def obf_variables(data):
    return re.sub(r'(\w+)\s*=', r'_\1_ =', data)

def add_obfuscation(data):
    data = '__import__("builtins").__dict__["exec"](' + repr(data) + ')'
    return data

def encode_strings(data):
    x = base64.b64encode(data.encode()).decode()
    return f'__import__("base64").b64decode("{x}").decode()'

def rc4_enc(data, k="key"):
    s = list(range(256))
    j = 0
    for i in range(256):
        j = (j + s[i] + ord(k[i % len(k)])) % 256
        s[i], s[j] = s[j], s[i]
    i = j = 0
    r = []
    for c in data:
        i = (i + 1) % 256
        j = (j + s[i]) % 256
        s[i], s[j] = s[j], s[i]
        r.append(chr(ord(c) ^ s[(s[i] + s[j]) % 256]))
    return ''.join(r)

def zlib_only(data):
    return zlib.compress(data.encode()).decode('latin1')

def b64_zlib(data):
    return base64.b64encode(zlib.compress(data.encode())).decode()

def rendy_enc(data):
    x = marshal.dumps(data)
    x = lzma.compress(x)
    x = zlib.compress(x)
    return base64.b64encode(x).decode()

def mzb_enc(data):
    x = marshal.dumps(data)
    x = zlib.compress(x)
    return base64.b64encode(x).decode()

enc = {
    1: ("Base64", b64_enc), 2: ("ROT13", rot13_enc), 3: ("Hex", hex_enc),
    4: ("Zlib+Base64", zlib_enc), 5: ("Marshal+Base64", marshal_enc),
    6: ("Exec wrap", exec_wrap), 7: ("Eval wrap", eval_wrap),
    8: ("Lambda wrap", lambda_wrap), 9: ("Reverse string", rev_str),
    10: ("ASCII shift", ascii_shift), 11: ("XOR (key=42)", xor_enc),
    12: ("Pickle+Base64", pickle_enc), 13: ("Gzip+Base64", gzip_enc),
    14: ("URL encode", url_enc), 15: ("Binary encode", bin_enc),
    16: ("Caesar (shift=3)", caesar_enc), 17: ("Atbash cipher", atbash_enc),
    18: ("Unicode escape", unicode_enc), 19: ("Octal encode", octal_enc),
    20: ("Double Base64", double_b64_enc), 21: ("Add comments", add_comments),
    22: ("Wrap strings", wrap_strings), 23: ("Simple substitution", sub_enc),
    24: ("Char to number", char_to_num), 25: ("Obf imports", obf_imports),
    26: ("Obf functions", obf_functions), 27: ("Obf variables", obf_variables),
    28: ("Add obfuscation", add_obfuscation), 29: ("Encode strings", encode_strings),
    30: ("RC4 encode", rc4_enc), 31: ("Zlib", zlib_only),
    32: ("Base64+Zlib", b64_zlib), 33: ("Rendy(M+L+Z+B64)", rendy_enc),
    34: ("Marshal+Zlib+B64", mzb_enc)
}

def show_banner():
    banner = """
██████╗ ██████╗ ██╗   ██╗██╗  ██╗     ██████╗ ██████╗ ███████╗
██╔══██╗██╔══██╗██║   ██║██║  ██║    ██╔═══██╗██╔══██╗██╔════╝
██████╔╝██████╔╝██║   ██║███████║    ██║   ██║██████╔╝█████╗  
██╔══██╗██╔══██╗██║   ██║██╔══██║    ██║   ██║██╔══██╗██╔══╝  
██████╔╝██║  ██║╚██████╔╝██║  ██║    ╚██████╔╝██████╔╝██║     
╚═════╝ ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═╝     ╚═════╝ ╚═════╝ ╚═╝     
         Coder: @FGBruh, @FGIADV subscribe please
    """
    print(create_gradient(banner))

def show_menu():
    w = 46
    lines = []
    lines.append("╔" + "═" * w + "╗")
    lines.append("║" + "Bruh Obfuscator".center(w) + "║")
    lines.append("╠" + "═" * w + "╣")
    lines.append("║ Basic Encodings:" + " " * (w - 17) + "║")

    for k in range(1, 13):
        s = f" {k:2d}. {enc[k][0]}"
        lines.append("║" + s + " " * (w - len(s)) + "║")

    lines.append("╠" + "═" * w + "╣")
    lines.append("║ Ciphers & Transforms:" + " " * (w - 22) + "║")

    for k in range(13, 25):
        s = f" {k:2d}. {enc[k][0]}"
        lines.append("║" + s + " " * (w - len(s)) + "║")

    lines.append("╠" + "═" * w + "╣")
    lines.append("║ Advanced & Extraction:" + " " * (w - 23) + "║")

    for k in range(25, 35):
        s = f" {k:2d}. {enc[k][0]}"
        lines.append("║" + s + " " * (w - len(s)) + "║")

    lines.append("╠" + "═" * w + "╣")
    lines.append("║  0. Exit" + " " * (w - 9) + "║")
    lines.append("╚" + "═" * w + "╝")

    print(create_gradient("\n".join(lines)))

def main():
    show_banner()
    while True:
        show_menu()
        try:
            ch = int(input("\nSelect: "))
            if ch == 0: break
            if ch not in enc:
                print("Invalid")
                continue

            fp = input("Source file: ").strip()
            if not os.path.exists(fp):
                print("Not found")
                continue

            with open(fp, 'r', encoding='utf-8', errors='ignore') as f:
                data = f.read()

            name, encoder = enc[ch]
            print(f"\nApplying {name}...")

            res = encoder(data)
            if res:
                base_name = os.path.splitext(os.path.basename(fp))[0]
                out = f"{base_name}_obf.py"
                with open(out, 'w', encoding='utf-8') as f:
                    f.write(str(res))
                print(f"Saved: {out}")
            else:
                print("Failed")

        except (ValueError, KeyboardInterrupt):
            print("Invalid")
        except Exception as e:
            print(f"Error: {e}")

if __name__ == "__main__":
    main()').decode('utf-8'))