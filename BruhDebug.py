import base64;exec(base64.b64decode('import ast, sys, os, re, base64, zlib, marshal, types, builtins, dis, gc, gzip, lzma, pickle, codecs, time, socket, \
    platform, subprocess, psutil
from io import StringIO
from urllib.parse import unquote


def create_gradient(text, start_rgb=(255, 140, 0), end_rgb=(148, 0, 211)):
    lines, result = text.splitlines(), []
    for line in lines:
        colored_line = ""
        if line.strip():
            length = len(line)
            for i, char in enumerate(line):
                ratio = i / max(1, length - 1)
                r = int(start_rgb[0] * (1 - ratio) + end_rgb[0] * ratio)
                g = int(start_rgb[1] * (1 - ratio) + end_rgb[1] * ratio)
                b = int(start_rgb[2] * (1 - ratio) + end_rgb[2] * ratio)
                colored_line += f"\033[38;2;{r};{g};{b}m{char}\033[0m"
        else:
            colored_line = line
        result.append(colored_line)
    return "\n".join(result)


class X:
    def __init__(self):
        self.c, self.v, self.f, self.d, self.m = [], [], {}, {}, []
        self.t = time.time()

    def anti_debug_bypass(self):
        def fake_gethostname():
            return "DESKTOP-USER123"

        def fake_getuser():
            return "user"

        def fake_platform():
            return "Windows-10-10.0.19041-SP0"

        def fake_machine():
            return "AMD64"

        def fake_processor():
            return "Intel64 Family 6 Model 142 Stepping 10, GenuineIntel"

        def fake_listdir(p):
            return ["System32", "Program Files", "Users", "Windows"]

        def fake_exists(p):
            return p not in ["/proc", "/sys", "/dev/vda", "/dev/sda"]

        def fake_isfile(p):
            return p not in ["/.dockerenv", "/proc/self/cgroup"]

        def fake_environ():
            return {"COMPUTERNAME": "DESKTOP-USER123", "USERNAME": "user", "OS": "Windows_NT"}

        def fake_time():
            return self.t + (time.time() - self.t) * 1000

        def fake_sleep(s):
            time.sleep(max(0.001, s / 1000))

        def fake_processes():
            return [{"name": "explorer.exe", "pid": 1234}, {"name": "winlogon.exe", "pid": 567}]

        def fake_run(*a, **k):
            return types.SimpleNamespace(returncode=0, stdout="", stderr="")

        def fake_popen(*a, **k):
            return types.SimpleNamespace(communicate=lambda: ("", ""), returncode=0)

        hk = {
            'socket.gethostname': fake_gethostname,
            'os.getlogin': fake_getuser,
            'os.environ': fake_environ(),
            'platform.system': lambda: "Windows",
            'platform.platform': fake_platform,
            'platform.machine': fake_machine,
            'platform.processor': fake_processor,
            'os.listdir': fake_listdir,
            'os.path.exists': fake_exists,
            'os.path.isfile': fake_isfile,
            'time.time': fake_time,
            'time.sleep': fake_sleep,
            'psutil.process_iter': fake_processes,
            'subprocess.run': fake_run,
            'subprocess.Popen': fake_popen,
        }

        for m in ['socket', 'os', 'platform', 'time', 'psutil', 'subprocess']:
            try:
                mod = __import__(m)
                for k, v in hk.items():
                    if k.startswith(m + '.'):
                        setattr(mod, k.split('.')[1], v)
            except:
                pass

    def dec(self, s, depth=0):
        if depth > 3 or len(s) < 20: return
        ds = [
            lambda x: base64.b64decode(x).decode('utf-8', errors='ignore'),
            lambda x: zlib.decompress(base64.b64decode(x)).decode('utf-8', errors='ignore'),
            lambda x: str(marshal.loads(base64.b64decode(x))),
            lambda x: gzip.decompress(base64.b64decode(x)).decode('utf-8', errors='ignore'),
            lambda x: lzma.decompress(base64.b64decode(x)).decode('utf-8', errors='ignore'),
            lambda x: str(pickle.loads(base64.b64decode(x))),
            lambda x: bytes.fromhex(x).decode('utf-8', errors='ignore'),
            lambda x: x[::-1],
            lambda x: ''.join(chr(ord(c) ^ 42) for c in x),
            lambda x: ''.join(chr(ord(c) - 1) for c in x if ord(c) > 32),
            lambda x: codecs.decode(x, 'rot13'),
            lambda x: unquote(x),
        ]
        for d in ds:
            try:
                r = d(s)
                if r and len(r) > len(s) * 0.3 and r != s and r not in self.d.values():
                    self.d[len(self.d)] = r
                    if depth < 2: self.dec(r, depth + 1)
            except:
                pass

    def ast_scan(self, code):
        try:
            t = ast.parse(code)
            for n in ast.walk(t):
                if isinstance(n, ast.FunctionDef):
                    self.f[n.name] = "F"
                elif isinstance(n, ast.Assign):
                    for tgt in n.targets:
                        if isinstance(tgt, ast.Name) and isinstance(n.value, ast.Constant):
                            self.v.append((tgt.id, str(n.value.value)[:30]))
                elif isinstance(n, ast.Call) and isinstance(n.func, ast.Name):
                    if n.func.id in ['exec', 'eval', 'compile']:
                        for arg in n.args:
                            if isinstance(arg, ast.Constant): self.c.append((n.func.id, str(arg.value)[:50]))
        except:
            pass

    def regex_extract(self, code):
        ps = [
            r'["\']([A-Za-z0-9+/=]{30,})["\']',
            r'exec\s*\(\s*["\']([^"\']+)["\']',
            r'eval\s*\(\s*["\']([^"\']+)["\']',
            r'marshal\.loads\(([^)]+)\)',
            r'base64\.b64decode\(["\']([^"\']+)["\']',
        ]
        for p in ps:
            try:
                for m in re.finditer(p, code):
                    s = m.group(1) if m.groups() else m.group(0)
                    if len(s) > 10: self.dec(s)
            except:
                pass

    def safe_exec(self, code):
        orig = {}
        hooks = ['exec', 'eval', '__import__', 'open', 'compile', 'exit', 'quit', 'input', 'print']

        for n in hooks:
            if hasattr(builtins, n):
                orig[n] = getattr(builtins, n)
                setattr(builtins, n, lambda *a, **k: self.c.append((n, str(a[0])[:50])) if a else None)

        self.anti_debug_bypass()

        try:
            g = {'__builtins__': {'len': len, 'str': str, 'int': int, 'chr': chr, 'ord': ord, 'hex': hex}}
            exec(code, g)
        except:
            pass
        finally:
            for k, v in orig.items(): setattr(builtins, k, v)

    def run(self, fp):
        try:
            with open(fp, 'r', encoding='utf-8', errors='ignore') as f:
                code = f.read()
        except:
            return False

        print(f"[+] X: {fp}")
        self.ast_scan(code)
        self.regex_extract(code)
        self.safe_exec(code)

        layers = [code]
        for _ in range(10):
            if not self.d: break
            try:
                last = list(self.d.values())[-1]
                if isinstance(last, str) and last not in layers and len(last) > 50:
                    layers.append(last)
                    self.ast_scan(last)
                    self.regex_extract(last)
            except:
                break

        print(f"V:{len(self.v)} F:{len(self.f)} C:{len(self.c)} D:{len(self.d)} L:{len(layers)}")

        for k, v in self.v[:3]: print(f"  {k}:{v}")
        for t, c in self.c[:3]: print(f"  {t}:{c}")

        out = f"# X: {fp}\n"
        for i, l in enumerate(layers): out += f"\n# L{i}:\n{l}\n"
        for t, c in self.c: out += f"# {t}: {c}\n"
        for k, v in self.d.items(): out += f"# D{k}: {v[:100]}\n"

        try:
            with open(f"x_{os.path.basename(fp)}", 'w', encoding='utf-8') as f:
                f.write(out)
            print(f"[+] x_{os.path.basename(fp)}")
        except:
            pass
        return True


def show_banner():
    banner = """
    ██████╗ ██████╗ ██╗   ██╗██╗  ██╗                              
    ██╔══██╗██╔══██╗██║   ██║██║  ██║                              
    ██████╔╝██████╔╝██║   ██║███████║                              
    ██╔══██╗██╔══██╗██║   ██║██╔══██║                              
    ██████╔╝██║  ██║╚██████╔╝██║  ██║                              
    ╚═════╝ ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═╝                              
                                                                   
██████╗ ███████╗██████╗ ██╗   ██╗ ██████╗  ██████╗ ███████╗██████╗ 
██╔══██╗██╔════╝██╔══██╗██║   ██║██╔════╝ ██╔════╝ ██╔════╝██╔══██╗
██║  ██║█████╗  ██████╔╝██║   ██║██║  ███╗██║  ███╗█████╗  ██████╔╝
██║  ██║██╔══╝  ██╔══██╗██║   ██║██║   ██║██║   ██║██╔══╝  ██╔══██╗
██████╔╝███████╗██████╔╝╚██████╔╝╚██████╔╝╚██████╔╝███████╗██║  ██║
╚═════╝ ╚══════╝╚═════╝  ╚═════╝  ╚═════╝  ╚═════╝ ╚══════╝╚═╝  ╚═╝
                                                                   
                    Debugger By @FGBruh
    """
    print(create_gradient(banner))


def main():
    show_banner()
    while True:
        try:
            fp = input("\nPath: ").strip()
            if fp.lower() == 'q': break
            if not os.path.exists(fp): print("[-] X"); continue
            X().run(fp)
        except KeyboardInterrupt:
            break
        except Exception as e:
            print(f"[-] {e}")


if __name__ == "__main__": main()').decode('utf-8'))