import base64;exec(base64.b64decode('import os
import socket
import re
import time
import requests
import json
import hashlib
import ssl
import base64
import threading
import queue
import urllib3
import dns.resolver
import concurrent.futures
from datetime import datetime
from urllib.parse import urlparse, parse_qs, urljoin, quote, unquote
from concurrent.futures import ThreadPoolExecutor
from bs4 import BeautifulSoup
from BruhPentest.utils import get_random_user_agent, ADMIN_PANELS, JUICY_FILES, JS_PATHS, SUB_DOMAINS

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


class WebScanner:
    def __init__(self):
        self.sess = requests.Session()
        self.sess.headers.update({'User-Agent': get_random_user_agent()})

    def hit_endpoint(self, url, method="GET", data=None, headers=None, follow_redirects=True, verify=False, timeout=10):
        try:
            browser = {'User-Agent': get_random_user_agent()}
            if headers:
                browser.update(headers)

            if method.upper() == "GET":
                resp = self.sess.get(
                    url,
                    headers=browser,
                    allow_redirects=follow_redirects,
                    verify=verify,
                    timeout=timeout
                )
            elif method.upper() == "POST":
                resp = self.sess.post(
                    url,
                    data=data,
                    headers=browser,
                    allow_redirects=follow_redirects,
                    verify=verify,
                    timeout=timeout
                )
            elif method.upper() == "HEAD":
                resp = self.sess.head(
                    url,
                    headers=browser,
                    allow_redirects=follow_redirects,
                    verify=verify,
                    timeout=timeout
                )
            else:
                return None

            return resp
        except requests.RequestException:
            return None

    def get_server_info(self, url):
        resp = self.hit_endpoint(url, method="HEAD")
        info = {}

        if resp:
            hdrs = resp.headers
            info["status_code"] = resp.status_code
            info["server"] = hdrs.get("Server", "Не найдено")
            info["x_powered_by"] = hdrs.get("X-Powered-By", "Не найдено")
            info["content_type"] = hdrs.get("Content-Type", "Не найдено")

        return info

    def check_robots_txt(self, url):
        robots_url = urljoin(url, "/robots.txt")
        resp = self.hit_endpoint(robots_url)

        if resp and resp.status_code == 200:
            lines = resp.text.split('\n')
            disallowed = [line.split(': ')[1].strip() for line in lines if line.lower().startswith('disallow:')]
            return disallowed

        return []

    def check_waf(self, url):
        try:
            payloads = [
                "?id=1'",
                "?id=1+AND+1=1",
                "?q=<script>alert(1)</script>",
                "?q=1*/ORDER/**/BY/**/1--",
                "?s=../../../../../etc/passwd"
            ]

            for payload in payloads:
                test_url = url + payload
                resp = self.hit_endpoint(test_url)

                if resp and resp.status_code == 403:
                    hdrs = resp.headers
                    for hdr in hdrs:
                        if any(waf in hdr.lower() or waf in str(hdrs[hdr]).lower() for waf in
                               ["cloudflare", "akamai", "incapsula", "sucuri", "imperva", "distil"]):
                            print(f"[+] WAF найден: {hdr}: {hdrs[hdr]}")
                            return True

                    body = resp.text.lower()
                    waf_phrases = ["blocked", "firewall", "protection", "security", "forbidden", "waf",
                                   "detected attack"]
                    if any(phrase in body for phrase in waf_phrases):
                        print(f"[+] WAF обнаружен в ответе")
                        return True

            print(f"[+] WAF не обнаружен")
            return False
        except Exception as e:
            print(f"[-] Ошибка при проверке WAF: {str(e)}")
            return False

    def find_subdomains(self, domain, max_subdomains=50):
        found_subs = set()

        for sub in SUB_DOMAINS[:max_subdomains]:
            url = f"http://{sub}.{domain}"

            try:
                resp = self.hit_endpoint(url, timeout=5)
                if resp:
                    found_subs.add(f"{sub}.{domain}")
                    print(f"[+] Поддомен найден: {sub}.{domain}")
            except:
                pass

        return list(found_subs)

    def scan_dirs(self, url):
        common_dirs = [
            "admin", "login", "wp-admin", "cpanel", "phpmyadmin",
            "administrator", "webadmin", "admindashboard", "wp-login",
            "user", "manager", "management", "site", "backup", "backups",
            "cms", "control", "panel", "console", "api", "apis",
            "upload", "uploads", "download", "downloads", "content",
            "wp-content", "images", "img", "static", "assets", "js",
            "css", "styles", "includes", "inc", "vendor", "config",
            "configuration", "setup", "install", "db", "database",
            "sql", "data", "temp", "tmp", "test", "tests", "dev",
            "development", "prod", "production", "stage", "staging"
        ]

        found_dirs = []

        for d in common_dirs:
            dir_url = urljoin(url, d + "/")
            resp = self.hit_endpoint(dir_url, method="HEAD", follow_redirects=False)

            if not resp:
                continue

            if resp.status_code in [301, 302, 303, 307, 308]:
                redir_url = resp.headers.get('Location', '')
                if redir_url and not (redir_url == '/' or redir_url == url or redir_url == url + '/'):
                    found_dirs.append(dir_url)
                    print(f"[+] Каталог найден: {dir_url} ({resp.status_code} -> {redir_url})")
            elif resp.status_code in [200, 401, 403]:
                if resp.status_code in [401, 403]:
                    found_dirs.append(dir_url)
                    print(f"[+] Защищенный каталог найден: {dir_url} ({resp.status_code})")
                else:
                    is_dir = True

                    if d in ["images", "img", "css", "js", "assets", "static"]:
                        is_dir = True
                    else:
                        full_resp = self.hit_endpoint(dir_url)
                        if full_resp:
                            if not full_resp.text or len(full_resp.text) < 100:
                                is_dir = False
                            elif '>Index of' in full_resp.text:
                                is_dir = True
                            elif 'not found' in full_resp.text.lower() or '404' in full_resp.text:
                                is_dir = False

                    if is_dir:
                        found_dirs.append(dir_url)
                        print(f"[+] Каталог найден: {dir_url} ({resp.status_code})")

        return found_dirs

    def find_admin_panels(self, url):
        base = url.rstrip('/')
        domain = urlparse(url).netloc

        found_panels = []

        for panel in ADMIN_PANELS:
            panel_url = urljoin(base, panel)
            resp = self.hit_endpoint(panel_url, method="HEAD", follow_redirects=False)

            if not resp:
                continue

            if resp.status_code in [200, 401, 403]:
                found_panels.append(panel_url)
                print(f"[+] Админка найдена: {panel_url} ({resp.status_code})")
            elif resp.status_code in [301, 302, 303, 307, 308]:
                redir_url = resp.headers.get('Location', '')
                if redir_url and not (redir_url == '/' or redir_url == url or redir_url == url + '/'):
                    resp2 = self.hit_endpoint(panel_url, follow_redirects=True)
                    if resp2 and resp2.status_code in [200, 401, 403]:
                        auth_markers = ['login', 'admin', 'auth', 'sign in', 'password', 'username']
                        if resp2.status_code in [401, 403] or any(
                                marker in resp2.text.lower() for marker in auth_markers):
                            found_panels.append(panel_url)
                            print(f"[+] Админка найдена: {panel_url} ({resp.status_code} -> {resp2.status_code})")

        return found_panels

    def find_sensitive_files(self, url):
        base = url.rstrip('/')

        found_files = []

        for f_path in JUICY_FILES:
            file_url = urljoin(base, f_path)
            resp = self.hit_endpoint(file_url, method="HEAD", follow_redirects=False)

            if not resp:
                continue

            if resp.status_code in [301, 302, 303, 307, 308]:
                redir_url = resp.headers.get('Location', '')
                if redir_url and not (redir_url == '/' or redir_url == url or redir_url == url + '/'):
                    resp2 = self.hit_endpoint(file_url, follow_redirects=True)
                    if resp2 and resp2.status_code == 200:
                        if self._is_likely_real_file(f_path, resp2):
                            found_files.append(file_url)
                            print(
                                f"[+] Сенситивный файл найден: {file_url} ({resp.status_code} -> {resp2.status_code})")
            elif resp.status_code == 200:
                mime_type = resp.headers.get('Content-Type', '')
                if f_path.endswith('.txt') and 'text/plain' in mime_type:
                    found_files.append(file_url)
                    print(f"[+] Сенситивный файл найден: {file_url} ({resp.status_code})")
                elif f_path.endswith('.php') and 'text/html' in mime_type:
                    resp2 = self.hit_endpoint(file_url)
                    if resp2 and 'phpinfo' in f_path and 'php version' in resp2.text.lower():
                        found_files.append(file_url)
                        print(f"[+] PHP инфо найдено: {file_url}")
                elif f_path.endswith(('.json', '.xml')):
                    if 'application/json' in mime_type or 'application/xml' in mime_type or 'text/xml' in mime_type:
                        found_files.append(file_url)
                        print(f"[+] Сенситивный файл найден: {file_url} ({resp.status_code})")
                elif f_path.endswith(('.zip', '.tar.gz', '.rar', '.bak', '.sql')):
                    if 'text/html' not in mime_type:
                        found_files.append(file_url)
                        print(f"[+] Сенситивный файл найден: {file_url} ({resp.status_code})")
                elif '.git' in f_path or '.env' in f_path:
                    resp2 = self.hit_endpoint(file_url)
                    if resp2 and len(resp2.text) < 1000:
                        found_files.append(file_url)
                        print(f"[+] Сенситивный файл найден: {file_url} ({resp.status_code})")
            elif resp.status_code in [401, 403]:
                found_files.append(file_url)
                print(f"[+] Защищенный сенситивный файл: {file_url} ({resp.status_code})")

        return found_files

    def find_js_files(self, url):
        resp = self.hit_endpoint(url)

        if not resp:
            return []

        js_files = []

        soup = BeautifulSoup(resp.text, 'html.parser')

        for script in soup.find_all('script'):
            if script.get('src'):
                js_url = urljoin(url, script['src'])
                js_files.append(js_url)

        base = url.rstrip('/')

        for endpoint in JS_PATHS:
            js_url = urljoin(base, endpoint)
            endpoint_resp = self.hit_endpoint(js_url, method="HEAD")

            if endpoint_resp and endpoint_resp.status_code != 404:
                js_files.append(js_url)

        return list(set(js_files))

    def extract_hidden_endpoints(self, js_files):
        endpoints = []

        for js_file in js_files:
            resp = self.hit_endpoint(js_file)

            if not resp:
                continue

            js_content = resp.text

            potential_eps = re.findall(r'["\'](/[a-zA-Z0-9_\-./]+)["\']', js_content)
            api_eps = re.findall(r'["\'](/api/[a-zA-Z0-9_\-./]+)["\']', js_content)

            base = '/'.join(js_file.split('/')[:3])

            for ep in set(potential_eps + api_eps):
                full_url = urljoin(base, ep)
                endpoints.append(full_url)

        return list(set(endpoints))

    def check_endpoints(self, endpoints):
        valid_eps = []

        for ep in endpoints:
            resp = self.hit_endpoint(ep, method="HEAD")

            if resp and resp.status_code != 404:
                valid_eps.append(ep)
                print(f"[+] Валидный эндпоинт: {ep} ({resp.status_code})")

        return valid_eps

    def extract_forms(self, url):
        resp = self.hit_endpoint(url)

        if not resp:
            return []

        forms = []

        soup = BeautifulSoup(resp.text, 'html.parser')

        for form in soup.find_all('form'):
            form_data = {
                "action": urljoin(url, form.get('action', '')),
                "method": form.get('method', 'get').upper(),
                "inputs": []
            }

            for input_field in form.find_all(['input', 'select', 'textarea']):
                input_data = {
                    "name": input_field.get('name', ''),
                    "type": input_field.get('type', 'text') if input_field.name == 'input' else input_field.name,
                    "value": input_field.get('value', '')
                }
                form_data["inputs"].append(input_data)

            forms.append(form_data)

        return forms

    def port_scan(self, host, ports=None):
        if ports is None:
            ports = [21, 22, 23, 25, 53, 80, 110, 111, 135, 139, 143, 443, 445, 993, 995, 1723, 3306, 3389, 5900, 8080]

        open_ports = {}

        print(f"[*] Сканим порты для {host}...")

        for port in ports:
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                result = sock.connect_ex((host, port))
                if result == 0:
                    service = socket.getservbyport(port, 'tcp') if port < 1024 else "хз"
                    open_ports[port] = service
                    print(f"[+] Порт {port} ({service}) открыт")
                sock.close()
            except:
                pass

        return open_ports

    def dns_lookup(self, domain):
        dns_info = {}

        print(f"[*] DNS-поиск для {domain}...")

        rec_types = ["A", "AAAA", "MX", "NS", "TXT", "SOA", "CNAME"]

        for rec_type in rec_types:
            try:
                answers = dns.resolver.resolve(domain, rec_type)
                dns_info[rec_type] = [str(answer) for answer in answers]
                print(f"[+] {rec_type} записи:")
                for answer in answers:
                    print(f"  - {answer}")
            except:
                dns_info[rec_type] = []

        return dns_info

    def analyze_headers(self, url):
        resp = self.hit_endpoint(url)
        headers_analysis = {}

        if resp:
            hdrs = resp.headers

            print(f"[*] Анализ заголовков для {url}...")

            headers_analysis["server"] = hdrs.get("Server", "Не найдено")
            headers_analysis["x_powered_by"] = hdrs.get("X-Powered-By", "Не найдено")

            sec_headers = {
                "Strict-Transport-Security": hdrs.get("Strict-Transport-Security", "Отсутствует"),
                "Content-Security-Policy": hdrs.get("Content-Security-Policy", "Отсутствует"),
                "X-Content-Type-Options": hdrs.get("X-Content-Type-Options", "Отсутствует"),
                "X-Frame-Options": hdrs.get("X-Frame-Options", "Отсутствует"),
                "X-XSS-Protection": hdrs.get("X-XSS-Protection", "Отсутствует"),
                "Referrer-Policy": hdrs.get("Referrer-Policy", "Отсутствует"),
                "Feature-Policy": hdrs.get("Feature-Policy", "Отсутствует"),
                "Permissions-Policy": hdrs.get("Permissions-Policy", "Отсутствует")
            }

            for header, value in sec_headers.items():
                headers_analysis[header] = value
                print(f"[+] {header}: {value}")

        return headers_analysis

    def _extract_title(self, html):
        match = re.search(r'<title[^>]*>(.*?)</title>', html, re.IGNORECASE | re.DOTALL)
        if match:
            return match.group(1).strip()
        return ""

    def _extract_h1(self, html):
        match = re.search(r'<h1[^>]*>(.*?)</h1>', html, re.IGNORECASE | re.DOTALL)
        if match:
            return match.group(1).strip()
        return ""

    def analyze_ssl(self, url):
        if not url.startswith('https://'):
            print("[-] URL не юзает SSL/TLS")
            return {"ssl_enabled": False}

        try:
            domain = urlparse(url).netloc.split(':')[0]
            ctx = ssl.create_default_context()

            with socket.create_connection((domain, 443)) as sock:
                with ctx.wrap_socket(sock, server_hostname=domain) as ssock:
                    cert = ssock.getpeercert()

                    ssl_info = {
                        "ssl_enabled": True,
                        "issuer": ", ".join([f"{k}={v}" for k, v in cert["issuer"][0]]),
                        "subject": ", ".join([f"{k}={v}" for k, v in cert["subject"][0]]),
                        "version": cert["version"],
                        "valid_from": cert["notBefore"],
                        "valid_until": cert["notAfter"],
                        "serial_number": cert["serialNumber"]
                    }

                    print(f"[+] SSL включен: {ssl_info['ssl_enabled']}")
                    print(f"[+] Издатель: {ssl_info['issuer']}")
                    print(f"[+] Субъект: {ssl_info['subject']}")
                    print(f"[+] Версия: {ssl_info['version']}")
                    print(f"[+] Действителен с: {ssl_info['valid_from']}")
                    print(f"[+] Действителен до: {ssl_info['valid_until']}")
                    print(f"[+] Серийник: {ssl_info['serial_number']}")

                    return ssl_info
        except Exception as e:
            print(f"[-] Ошибка при анализе SSL: {str(e)}")
            return {"ssl_enabled": True, "error": str(e)}

    def scan_waf(self, url):
        waf_sigs = {
            "Cloudflare": ["cloudflare", "__cfduid", "cf-ray"],
            "Incapsula": ["incapsula", "incap_ses", "visid_incap"],
            "Akamai": ["akamai", "akamaighost"],
            "Sucuri": ["sucuri", "sucuriiframe"],
            "F5 BIG-IP": ["bigip", "f5"],
            "Imperva": ["imperva", "incapsula"],
            "Barracuda": ["barracuda"],
            "ModSecurity": ["mod_security", "modsecurity"],
            "AWS WAF": ["aws", "amazon"],
            "Fortinet": ["fortinet", "fortigate"],
            "Distil Networks": ["distil", "__distillery"]
        }

        print(f"[*] Сканим WAF для {url}...")

        resp = self.hit_endpoint(url)
        waf_info = {"detected": False}

        if resp:
            hdrs = resp.headers
            cookies = resp.cookies

            for waf, sigs in waf_sigs.items():
                for header_name, header_value in hdrs.items():
                    if any(sig.lower() in header_name.lower() or sig.lower() in header_value.lower() for sig in sigs):
                        waf_info["detected"] = True
                        waf_info["type"] = "Header-based"
                        waf_info["vendor"] = waf
                        print(f"[+] WAF обнаружен: {waf} (заголовок: {header_name})")
                        return waf_info

                for cookie in cookies:
                    if any(sig.lower() in cookie.name.lower() or sig.lower() in cookie.value.lower() for sig in sigs):
                        waf_info["detected"] = True
                        waf_info["type"] = "Cookie-based"
                        waf_info["vendor"] = waf
                        print(f"[+] WAF обнаружен: {waf} (cookie: {cookie.name})")
                        return waf_info

            test_payloads = [
                "?id=1'",
                "?id=1+AND+1=1",
                "?q=<script>alert(1)</script>",
                "?q=1*/ORDER/**/BY/**/1--",
                "?s=../../../../../etc/passwd"
            ]

            for payload in test_payloads:
                test_url = url + payload
                test_resp = self.hit_endpoint(test_url)

                if test_resp and test_resp.status_code == 403:
                    body = test_resp.text.lower()
                    for waf, sigs in waf_sigs.items():
                        if any(sig.lower() in body for sig in sigs):
                            waf_info["detected"] = True
                            waf_info["type"] = "Response-based"
                            waf_info["vendor"] = waf
                            print(f"[+] WAF обнаружен: {waf} (ответ)")
                            return waf_info

                    waf_info["detected"] = True
                    waf_info["type"] = "Behavior-based"
                    waf_info["vendor"] = "Unknown"
                    print("[+] WAF обнаружен: тип неизвестен")
                    return waf_info

        print("[-] WAF не обнаружен")
        return waf_info

    def detect_technologies(self, url):
        tech_sigs = {
            "Web Servers": {
                "Apache": ["apache", "x-powered-by: php"],
                "Nginx": ["nginx"],
                "IIS": ["iis", "microsoft-iis", "x-powered-by: asp.net"],
                "LiteSpeed": ["litespeed"],
                "Tomcat": ["tomcat"],
                "Node.js": ["node", "express"]
            },
            "CMS": {
                "WordPress": ["wp-content", "wp-includes", "wordpress"],
                "Joomla": ["joomla", "administrator/index.php", "com_content"],
                "Drupal": ["drupal", "sites/default", "sites/all"],
                "Magento": ["magento", "skin/frontend", "mage"],
                "Shopify": ["shopify", "cdn.shopify.com"],
                "WooCommerce": ["woocommerce"],
                "PrestaShop": ["prestashop"]
            },
            "JS Frameworks": {
                "jQuery": ["jquery"],
                "React": ["react", "reactjs"],
                "Angular": ["angular", "ng-"],
                "Vue.js": ["vue", "vuejs"],
                "Ember.js": ["ember"],
                "Backbone.js": ["backbone"],
                "Next.js": ["next", "__next"]
            },
            "Analytics & Tracking": {
                "Google Analytics": ["google-analytics.com", "ga('create'", "gtag"],
                "Google Tag Manager": ["googletagmanager.com"],
                "Facebook Pixel": ["connect.facebook.net", "fbq("],
                "Yandex.Metrica": ["mc.yandex.ru"],
                "Hotjar": ["hotjar.com", "hjLaunchEditor"]
            },
            "CDN": {
                "Cloudflare": ["cloudflare", "cdnjs.cloudflare.com"],
                "Akamai": ["akamai", "akamaihd.net"],
                "Fastly": ["fastly"],
                "MaxCDN": ["maxcdn"],
                "StackPath": ["stackpath"]
            }
        }

        print(f"[*] Ищем технологии для {url}...")

        resp = self.hit_endpoint(url)
        found_tech = {}

        if resp:
            hdrs = resp.headers
            headers_str = "\n".join([f"{k}: {v}" for k, v in hdrs.items()])
            html = resp.text

            for cat, technologies in tech_sigs.items():
                for tech, sigs in technologies.items():
                    for sig in sigs:
                        if sig.lower() in headers_str.lower() or sig.lower() in html.lower():
                            if cat not in found_tech:
                                found_tech[cat] = []
                            if tech not in found_tech[cat]:
                                found_tech[cat].append(tech)
                                print(f"[+] Обнаружили: {tech} ({cat})")
                                break

        js_files = self.find_js_files(url)
        for js_file in js_files[:5]:
            js_resp = self.hit_endpoint(js_file)
            if js_resp:
                js_content = js_resp.text
                for cat, technologies in tech_sigs.items():
                    for tech, sigs in technologies.items():
                        for sig in sigs:
                            if sig.lower() in js_content.lower():
                                if cat not in found_tech:
                                    found_tech[cat] = []
                                if tech not in found_tech[cat]:
                                    found_tech[cat].append(tech)
                                    print(f"[+] Обнаружили в JS: {tech} ({cat})")
                                    break

        return found_tech

    def scan_directory_listing(self, url):
        common_dirs = [
            "backup", "backups", "temp", "tmp", "files", "uploads",
            "download", "downloads", "docs", "documents", "images",
            "img", "photos", "pics", "css", "js", "javascript",
            "scripts", "includes", "inc", "include", "logs", "log",
            "admin", "administrator", "wp-content", "wp-includes",
            "data", "db", "database", "sql", "test", "tests",
            "dev", "development", "demo", "beta", "old", "new",
            "archive", "archives", "src", "source", "lib", "libs",
            "library", "libraries", "vendor", "vendors", "web",
            "webroot", "www", "wwwroot", "public", "public_html",
            "private", "secret", "hidden", "backup_old", "bak"
        ]

        print(f"[*] Проверяем листинг директорий для {url}...")

        dir_listing = []

        for dir_name in common_dirs:
            dir_url = urljoin(url, dir_name + "/")
            resp = self.hit_endpoint(dir_url)

            if resp and resp.status_code == 200:
                html = resp.text.lower()

                if "index of" in html and (dir_name + "/") in html:
                    dir_listing.append(dir_url)
                    print(f"[+] Нашли листинг директорий: {dir_url}")
                elif "directory listing" in html:
                    dir_listing.append(dir_url)
                    print(f"[+] Нашли листинг директорий: {dir_url}")
                elif "<pre>" in html and "parent directory" in html:
                    dir_listing.append(dir_url)
                    print(f"[+] Нашли листинг директорий: {dir_url}")
                elif "to parent directory" in html:
                    dir_listing.append(dir_url)
                    print(f"[+] Нашли листинг директорий: {dir_url}")

        return dir_listing

    def crawl_website(self, url, max_urls=100):
        print(f"[*] Сканим сайт для {url}...")

        base = url
        domain = urlparse(url).netloc

        visited = set()
        to_visit = [url]
        forms = []
        found_urls = []

        while to_visit and len(visited) < max_urls:
            curr_url = to_visit.pop(0)

            if curr_url in visited:
                continue

            print(f"[*] Сканим URL: {curr_url}")

            visited.add(curr_url)
            found_urls.append(curr_url)

            resp = self.hit_endpoint(curr_url)

            if not resp:
                continue

            if 'text/html' not in resp.headers.get('Content-Type', ''):
                continue

            soup = BeautifulSoup(resp.text, 'html.parser')

            page_forms = self.extract_forms(curr_url)
            forms.extend(page_forms)

            for a_tag in soup.find_all('a', href=True):
                href = a_tag['href']

                if not href or href.startswith('#'):
                    continue

                full_url = urljoin(curr_url, href)

                parsed = urlparse(full_url)

                if parsed.netloc == domain and full_url not in visited and full_url not in to_visit:
                    to_visit.append(full_url)

        return {
            "urls": found_urls,
            "forms": forms
        }

    def scan_wordpress(self, url):
        print(f"[*] Сканим WordPress для {url}...")

        wp_info = {}

        resp = self.hit_endpoint(url)

        if not resp:
            return None

        html = resp.text

        if 'wp-content' not in html and 'wp-includes' not in html:
            wp_admin_url = urljoin(url, 'wp-login.php')
            wp_admin_resp = self.hit_endpoint(wp_admin_url)

            if not wp_admin_resp or 'wordpress' not in wp_admin_resp.text.lower():
                print("[-] WordPress не обнаружен")
                return None

        print("[+] WordPress обнаружен")

        version_url = urljoin(url, 'wp-includes/version.php')
        version_resp = self.hit_endpoint(version_url)

        if version_resp and version_resp.status_code == 200:
            version_match = re.search(r'\$wp_version\s*=\s*[\'"]([^\'"]+)[\'"]', version_resp.text)
            if version_match:
                wp_info['version'] = version_match.group(1)
                print(f"[+] Версия WordPress: {wp_info['version']}")

        if 'version' not in wp_info:
            readme_url = urljoin(url, 'readme.html')
            readme_resp = self.hit_endpoint(readme_url)

            if readme_resp and readme_resp.status_code == 200:
                version_match = re.search(r'Version\s+([0-9.]+)', readme_resp.text)
                if version_match:
                    wp_info['version'] = version_match.group(1)
                    print(f"[+] Версия WordPress: {wp_info['version']}")

        wp_info['themes'] = []

        content_url = urljoin(url, 'wp-content/themes/')
        content_resp = self.hit_endpoint(content_url)

        if content_resp and content_resp.status_code == 200:
            if 'Index of' in content_resp.text:
                theme_links = re.findall(r'href="([^"]+?)/"', content_resp.text)
                for theme in theme_links:
                    if theme not in ['.', '..']:
                        wp_info['themes'].append(theme)

        if resp:
            theme_matches = re.findall(r'wp-content/themes/([^/]+)', resp.text)
            for theme in theme_matches:
                if theme not in wp_info['themes']:
                    wp_info['themes'].append(theme)

        if wp_info['themes']:
            print("[+] Найденные темы WordPress:")
            for theme in wp_info['themes']:
                print(f"  - {theme}")

        wp_info['plugins'] = []

        plugins_url = urljoin(url, 'wp-content/plugins/')
        plugins_resp = self.hit_endpoint(plugins_url)

        if plugins_resp and plugins_resp.status_code == 200:
            if 'Index of' in plugins_resp.text:
                plugin_links = re.findall(r'href="([^"]+?)/"', plugins_resp.text)
                for plugin in plugin_links:
                    if plugin not in ['.', '..']:
                        wp_info['plugins'].append(plugin)

        if resp:
            plugin_matches = re.findall(r'wp-content/plugins/([^/]+)', resp.text)
            for plugin in plugin_matches:
                if plugin not in wp_info['plugins']:
                    wp_info['plugins'].append(plugin)

        if wp_info['plugins']:
            print("[+] Найденные плагины WordPress:")
            for plugin in wp_info['plugins']:
                print(f"  - {plugin}")

        wp_info['users'] = []

        for i in range(1, 5):
            author_url = urljoin(url, f'?author={i}')
            author_resp = self.hit_endpoint(author_url)

            if author_resp and author_resp.status_code == 200:
                if 'author' in author_resp.url:
                    author = urlparse(author_resp.url).path.split('/')[-2]
                    if author and author not in wp_info['users']:
                        wp_info['users'].append(author)

                soup = BeautifulSoup(author_resp.text, 'html.parser')
                for link in soup.find_all('a', href=True):
                    if 'author' in link['href']:
                        author = link['href'].split('/')[-2]
                        if author and author not in wp_info['users']:
                            wp_info['users'].append(author)

        if wp_info['users']:
            print("[+] Найденные юзеры WordPress:")
            for user in wp_info['users']:
                print(f"  - {user}")

        wp_info['vulnerabilities'] = []

        if 'version' in wp_info:
            if wp_info['version'].startswith('4.') and int(wp_info['version'].split('.')[1]) < 7:
                wp_info['vulnerabilities'].append(
                    f"WordPress {wp_info['version']} уязвим к SQL инъекции (CVE-2017-9059)")

            if wp_info['version'].startswith('3.') or (
                    wp_info['version'].startswith('4.') and int(wp_info['version'].split('.')[1]) < 2):
                wp_info['vulnerabilities'].append(f"WordPress {wp_info['version']} уязвим к CSRF (CVE-2014-0166)")

        for plugin in wp_info.get('plugins', []):
            if plugin == 'wp-super-cache' and 'version' in wp_info and wp_info['version'] < '1.4.8':
                wp_info['vulnerabilities'].append(f"Плагин wp-super-cache уязвим к RCE (CVE-2017-5612)")

            if plugin == 'contact-form-7' and 'version' in wp_info and wp_info['version'] < '5.3.2':
                wp_info['vulnerabilities'].append(f"Плагин contact-form-7 уязвим к XSS (CVE-2020-35489)")

        if wp_info.get('vulnerabilities'):
            print("[+] Найденные уязвимости WordPress:")
            for vuln in wp_info['vulnerabilities']:
                print(f"  - {vuln}")

        return wp_info

    def scan_website(self, url):
        results = {}

        print(f"[*] Начинаем сканить: {url}")

        parsed = urlparse(url)
        if not parsed.scheme:
            url = 'http://' + url

        print(f"[*] Получаем инфу о сервере...")
        results["server_info"] = self.get_server_info(url)

        print(f"[*] Проверяем наличие WAF...")
        results["waf_detected"] = self.check_waf(url)

        print(f"[*] Проверяем robots.txt...")
        results["robots_txt"] = self.check_robots_txt(url)

        domain = urlparse(url).netloc
        print(f"[*] Ищем поддомены для {domain}...")
        results["subdomains"] = self.find_subdomains(domain)

        print(f"[*] Сканим директории...")
        results["directories"] = self.scan_dirs(url)

        print(f"[*] Ищем админки...")
        results["admin_panels"] = self.find_admin_panels(url)

        print(f"[*] Ищем сенситивные файлы...")
        results["sensitive_files"] = self.find_sensitive_files(url)

        print(f"[*] Ищем JS файлы...")
        js_files = self.find_js_files(url)
        results["js_files"] = js_files

        print(f"[*] Извлекаем скрытые эндпоинты из JS файлов...")
        endpoints = self.extract_hidden_endpoints(js_files)

        print(f"[*] Проверяем валидность эндпоинтов...")
        results["valid_endpoints"] = self.check_endpoints(endpoints)

        print(f"[*] Ищем формы...")
        results["forms"] = self.extract_forms(url)

        print(f"[+] Сканирование сайта завершено!")

        return results').decode('utf-8'))