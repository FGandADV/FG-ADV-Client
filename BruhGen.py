import base64;exec(base64.b64decode('from faker import Faker
from datetime import datetime, timedelta
import random as r
import os


def create_gradient(text, start_rgb=(255, 140, 0), end_rgb=(148, 0, 211)):
    lines, result = text.splitlines(), []
    for line in lines:
        colored_line = ""
        if line.strip():
            length = len(line)
            for i, char in enumerate(line):
                ratio = i / max(1, length - 1)
                r_val = int(start_rgb[0] * (1 - ratio) + end_rgb[0] * ratio)
                g = int(start_rgb[1] * (1 - ratio) + end_rgb[1] * ratio)
                b = int(start_rgb[2] * (1 - ratio) + end_rgb[2] * ratio)
                colored_line += f"\033[38;2;{r_val};{g};{b}m{char}\033[0m"
        else:
            colored_line = line
        result.append(colored_line)
    return "\n".join(result)


f_ru = Faker('ru_RU')
f_en = Faker('en_US')

banner = """
        ██████╗ ██████╗ ██╗   ██╗██╗  ██╗                                    
        ██╔══██╗██╔══██╗██║   ██║██║  ██║                                    
        ██████╔╝██████╔╝██║   ██║███████║                                    
        ██╔══██╗██╔══██╗██║   ██║██╔══██║                                    
        ██████╔╝██║  ██║╚██████╔╝██║  ██║                                    
        ╚═════╝ ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═╝                                    

 ██████╗ ███████╗███╗   ██╗███████╗██████╗  █████╗ ████████╗ ██████╗ ██████╗ 
██╔════╝ ██╔════╝████╗  ██║██╔════╝██╔══██╗██╔══██╗╚══██╔══╝██╔═══██╗██╔══██╗
██║  ███╗█████╗  ██╔██╗ ██║█████╗  ██████╔╝███████║   ██║   ██║   ██║██████╔╝
██║   ██║██╔══╝  ██║╚██╗██║██╔══╝  ██╔══██╗██╔══██║   ██║   ██║   ██║██╔══██╗
╚██████╔╝███████╗██║ ╚████║███████╗██║  ██║██║  ██║   ██║   ╚██████╔╝██║  ██║
 ╚═════╝ ╚══════╝╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝

"""

menu = """
╔════════════════════════════════════════════════════════════╗
║                    ГЕНЕРАЦИЯ ДАННЫХ                        ║
╠════════════════════════════════════════════════════════════╣
║  1. Имя                    11. Компания                    ║
║  2. Адрес                  12. Должность                   ║
║  3. Телефон                13. Email                       ║
║  4. Дата                   14. Город                       ║
║  5. Текст                  15. Страна                      ║
║  6. Пароль                 16. Валюта                      ║
║  7. URL                    17. Цвет HEX                    ║
║  8. IPv4                   18. User Agent                  ║
║  9. MAC адрес              19. Кредитная карта             ║
║ 10. UUID                   20. Координаты                  ║
║                                                            ║
║ 21. Транспорт              31. Штрих-код                   ║
║ 22. Животное               32. ISBN                        ║
║ 23. Слово                  33. Хэш MD5                     ║
║ 24. Предложение            34. Хэш SHA256                  ║
║ 25. Параграф               35. Банк                        ║
║ 26. IBAN                   36. Криптовалюта                ║
║ 27. BIC                    37. Язык программирования       ║
║ 28. ИНН                    38. Файл                        ║
║ 29. СНИЛС                  39. MIME тип                    ║
║ 30. Номер паспорта         40. Домен                       ║
║                                                            ║
║ 50. ПОЛНАЯ ЛИЧНОСТЬ (подробная генерация)                  ║
║  0. Выход                                                  ║
╚════════════════════════════════════════════════════════════╝
"""


def clr():
    os.system('cls' if os.name == 'nt' else 'clear')


def decline_surname(s, sex):
    if sex == 'f':
        if s.endswith(('ов', 'ев', 'ёв')):
            return s + 'а'
        elif s.endswith(('ин', 'ын')):
            return s + 'а'
        elif s.endswith('ий'):
            return s[:-2] + 'ая'
        elif s.endswith('ой'):
            return s[:-2] + 'ая'
    return s


def get_patronymic(fname, sex):
    if sex == 'f':
        if fname.endswith('й'):
            return fname[:-1] + 'евна'
        elif fname.endswith(('ь', 'ий')):
            return fname[:-1] + 'евна'
        else:
            return fname + 'овна'
    else:
        if fname.endswith('й'):
            return fname[:-1] + 'евич'
        elif fname.endswith(('ь', 'ий')):
            return fname[:-1] + 'евич'
        else:
            return fname + 'ович'


def is_dead(age):
    if age >= 95: return True
    if age >= 80: return r.random() < 0.4
    return False


def gen_edu(age):
    if age < 7: return None
    if age < 11: return {'level': 'начальная школа', 'class': age - 6}
    if age < 16: return {'level': 'средняя школа', 'class': age - 6}
    if age < 18: return {'level': 'старшая школа', 'class': age - 6}

    lvl = r.choice(['среднее', 'среднее специальное', 'высшее', 'высшее'])
    specs = ['IT', 'Медицина', 'Экономика', 'Юриспруденция', 'Инженерия', 'Менеджмент', 'Дизайн']
    unis = ['МГУ', 'МГТУ', 'МИФИ', 'НИУ ВШЭ', 'РУДН', 'РЭУ', 'МГИМО']

    return {
        'level': lvl,
        'spec': r.choice(specs) if 'высшее' in lvl else None,
        'uni': r.choice(unis) if 'высшее' in lvl else f'Колледж №{r.randint(1, 50)}',
        'year': r.randint(2000, 2023) if age > 22 else None
    }


def gen_bio():
    hobbies = ['спорт', 'музыка', 'чтение', 'путешествия', 'кино', 'игры', 'готовка', 'фото']
    traits = ['добрый', 'умный', 'веселый', 'спокойный', 'активный', 'творческий']
    return {
        'hobbies': r.sample(hobbies, r.randint(2, 4)),
        'traits': r.sample(traits, 3),
        'bio': f_ru.text(max_nb_chars=100)
    }


def gen_health(age):
    blood = ['O+', 'O-', 'A+', 'A-', 'B+', 'B-', 'AB+', 'AB-']
    chronic = ['диабет', 'астма', 'аллергия', 'гипертония', None, None, None]
    return {
        'blood': r.choice(blood),
        'height': r.randint(50 + min(age * 5, 120), 60 + min(age * 5, 130)) if age < 18 else r.randint(150, 200),
        'weight': r.randint(3 + age * 2, 5 + age * 3) if age < 18 else r.randint(50, 120),
        'chronic': r.choice(chronic) if age > 30 else None,
        'vision': r.choice([1.0, 0.9, 0.8, 0.7, -1, -2, -3]) if age > 10 else 1.0
    }


def gen_social():
    nets = ['vk', 'telegram', 'instagram', 'twitter', 'tiktok']
    return {
        'nets': {n: f'@{f_ru.user_name()}' for n in r.sample(nets, r.randint(2, 4))},
        'friends': r.randint(50, 500),
        'status': r.choice(['single', 'married', 'divorced', 'dating'])
    }


def gen_finance(age):
    if age < 18: return {'pocket': r.randint(500, 5000)}

    banks = ['Сбербанк', 'ВТБ', 'Альфа-Банк', 'Тинькофф', 'Райффайзен']
    return {
        'salary': r.randint(30000, 300000) // 5000 * 5000,
        'savings': r.randint(0, 1000000) // 10000 * 10000,
        'credit': r.randint(0, 5000000) // 50000 * 50000 if r.random() < 0.3 else 0,
        'bank': r.choice(banks),
        'cards': r.randint(1, 4),
        'crypto': r.random() < 0.2
    }


def gen_person_full(loc='ru'):
    f = f_ru if loc == 'ru' else f_en
    age = r.randint(0, 90)
    sex = r.choice(['m', 'f'])
    bd = datetime.now() - timedelta(days=age * 365 + r.randint(0, 364))

    fl = r.random() < 0.25

    def gen_parent(psex, child_age):
        p_age = child_age + r.randint(18, 45)
        p_bd = datetime.now() - timedelta(days=p_age * 365 + r.randint(0, 364))

        if psex == 'm':
            p_fn, p_ln, p_mn = f.first_name_male(), f.last_name_male(), f.middle_name_male()
        else:
            p_fn, p_ln, p_mn = f.first_name_female(), f.last_name_female(), f.middle_name_female()

        dead = is_dead(p_age)

        return {
            'name': f'{p_fn} {p_mn} {p_ln}',
            'age': p_age,
            'sex': psex,
            'birth': p_bd.strftime('%d.%m.%Y'),
            'dead': dead,
            'death_date': (p_bd + timedelta(days=p_age * 365 - r.randint(0, 365 * 5))).strftime(
                '%d.%m.%Y') if dead else None,
            'passport': f'{r.randint(1000, 9999)} {r.randint(100000, 999999)}' if p_age >= 14 and not dead else None,
            'phone': f.phone_number() if not dead else None,
            'email': f.email() if not dead else None,
            'work': gen_company() if p_age >= 18 and p_age <= 65 and not dead else None,
            'education': gen_edu(p_age),
            'health': gen_health(p_age) if not dead else None,
            'bio': gen_bio()
        }

    m = gen_parent('f', age)
    fa = gen_parent('m', age) if not fl else None

    if fa:
        f_first = fa['name'].split()[0]
        f_ln = fa['name'].split()[2]
        kept_maiden = r.random() < 0.1
        if not kept_maiden:
            m['name'] = m['name'].split()[0] + ' ' + m['name'].split()[1] + ' ' + decline_surname(f_ln, 'f')
        else:
            m['kept_maiden_name'] = True
    else:
        f_ln = m['name'].split()[2]
        f_first = None

    if not fl and fa:
        ln = f_ln
        patr = get_patronymic(f_first, sex)
    else:
        ln = m['name'].split()[2]
        patr = f_ru.middle_name_male() if sex == 'm' else f_ru.middle_name_female()

    fn = f.first_name_male() if sex == 'm' else f.first_name_female()
    ln = decline_surname(ln, sex)

    sibs = []
    if r.random() < 0.6:
        ns = r.randint(1, 4)
        for _ in range(ns):
            s_age = max(0, age + r.randint(-15, 15))
            s_sex = r.choice(['m', 'f'])
            s_bd = datetime.now() - timedelta(days=s_age * 365 + r.randint(0, 364))
            s_dead = is_dead(s_age)

            if s_sex == 'm':
                s_fn = f.first_name_male()
                s_patr = get_patronymic(f_first, 'm') if f_first else f.middle_name_male()
            else:
                s_fn = f.first_name_female()
                s_patr = get_patronymic(f_first, 'f') if f_first else f.middle_name_female()

            s_ln = decline_surname(ln if sex == 'm' else ln[:-1] if ln.endswith('а') else ln, s_sex)

            sibs.append({
                'name': f'{s_fn} {s_patr} {s_ln}',
                'age': s_age,
                'sex': s_sex,
                'birth': s_bd.strftime('%d.%m.%Y'),
                'dead': s_dead,
                'death_date': (s_bd + timedelta(days=s_age * 365 - r.randint(0, 365 * 5))).strftime(
                    '%d.%m.%Y') if s_dead else None,
                'passport': f'{r.randint(1000, 9999)} {r.randint(100000, 999999)}' if s_age >= 14 and not s_dead else None,
                'phone': f.phone_number() if s_age >= 12 and not s_dead else None
            })

    return {
        'name': f'{fn} {patr} {ln}',
        'age': age,
        'sex': sex,
        'birth': bd.strftime('%d.%m.%Y'),
        'passport': f'{r.randint(1000, 9999)} {r.randint(100000, 999999)}' if age >= 14 else None,
        'inn': f.businesses_inn() if age >= 14 else None,
        'snils': f'{r.randint(100, 999)}-{r.randint(100, 999)}-{r.randint(100, 999)} {r.randint(10, 99)}' if age >= 14 else None,
        'phone': f.phone_number() if age >= 12 else None,
        'email': f.email() if age >= 14 else None,
        'address': gen_address() if age >= 18 else m.get('address', gen_address()),
        'education': gen_edu(age),
        'work': gen_company() if age >= 18 and age <= 65 else None,
        'health': gen_health(age),
        'finance': gen_finance(age),
        'social': gen_social() if age >= 14 else None,
        'bio': gen_bio(),
        'parents': {
            'mother': m,
            'father': fa,
            'father_left': fl
        },
        'siblings': sibs
    }


def gen_address(loc='ru'):
    f = f_ru if loc == 'ru' else f_en
    return {
        'full': f.address(),
        'city': f.city(),
        'street': f.street_name(),
        'building': f.building_number(),
        'apt': r.randint(1, 200),
        'floor': r.randint(1, 25),
        'postal': f.postcode(),
        'metro': f'ст. {f.city_name()}' if r.random() < 0.7 else None
    }


def gen_company(loc='ru'):
    f = f_ru if loc == 'ru' else f_en
    depts = ['IT', 'HR', 'Финансы', 'Маркетинг', 'Продажи', 'Производство', 'Логистика']
    return {
        'name': f.company(),
        'position': f.job(),
        'department': r.choice(depts),
        'level': r.choice(['junior', 'middle', 'senior', 'lead', 'manager']),
        'salary': r.randint(30000, 500000) // 5000 * 5000,
        'experience': r.randint(0, 20),
        'remote': r.choice([True, False, 'hybrid'])
    }


def print_person(p):
    txt = f"""{'=' * 60}
ЛИЧНОСТЬ: {p['name']}
{'=' * 60}
Возраст: {p['age']} лет
Пол: {'Мужской' if p['sex'] == 'm' else 'Женский'}
Дата рождения: {p['birth']}"""

    if p['passport']:
        txt += f"""

ДОКУМЕНТЫ:
Паспорт: {p['passport']}"""
        if p['inn']: txt += f"\nИНН: {p['inn']}"
        if p['snils']: txt += f"\nСНИЛС: {p['snils']}"

    if p.get('phone') or p.get('email'):
        txt += f"\n\nКОНТАКТЫ:"
        if p.get('phone'): txt += f"\nТелефон: {p['phone']}"
        if p.get('email'): txt += f"\nEmail: {p['email']}"

    if p.get('address'):
        txt += f"\n\nАДРЕС:\n{p['address']['full']}"
        if p['address'].get('metro'): txt += f"\nМетро: {p['address']['metro']}"

    if p.get('education'):
        txt += f"\n\nОБРАЗОВАНИЕ:"
        edu = p['education']
        if edu:
            if 'class' in edu:
                txt += f"\n{edu['level'].title()}, {edu['class']} класс"
            else:
                txt += f"\nУровень: {edu['level']}"
                if edu.get('spec'): txt += f"\nСпециальность: {edu['spec']}"
                if edu.get('uni'): txt += f"\nУчебное заведение: {edu['uni']}"

    if p.get('work'):
        w = p['work']
        txt += f"""\n\nРАБОТА:
Компания: {w['name']}
Должность: {w['position']} ({w['level']})
Отдел: {w['department']}
Зарплата: {w['salary']:,} руб.
Опыт: {w['experience']} лет
Формат: {'Удаленка' if w['remote'] == True else 'Офис' if w['remote'] == False else 'Гибрид'}"""

    if p.get('health'):
        h = p['health']
        txt += f"""\n\nЗДОРОВЬЕ:
Рост: {h['height']} см, Вес: {h['weight']} кг
Группа крови: {h['blood']}"""
        if h['chronic']: txt += f"\nХронические: {h['chronic']}"

    if p.get('finance'):
        txt += f"\n\nФИНАНСЫ:"
        fin = p['finance']
        if 'pocket' in fin:
            txt += f"\nКарманные деньги: {fin['pocket']} руб."
        else:
            txt += f"\nЗарплата: {fin['salary']:,} руб."
            if fin['savings']: txt += f"\nСбережения: {fin['savings']:,} руб."
            if fin['credit']: txt += f"\nКредит: {fin['credit']:,} руб."
            txt += f"\nБанк: {fin['bank']}"

    if p.get('bio'):
        txt += f"""\n\nО СЕБЕ:
Увлечения: {', '.join(p['bio']['hobbies'])}
Качества: {', '.join(p['bio']['traits'])}"""

    if p.get('social'):
        txt += f"\n\nСОЦСЕТИ:"
        for net, acc in p['social']['nets'].items():
            txt += f"\n{net}: {acc}"

    txt += f"""\n\nСЕМЬЯ:
Мать: {p['parents']['mother']['name']} ({p['parents']['mother']['age']} лет)"""
    if p['parents']['mother'].get('dead'):
        txt += f" [УМЕРЛА {p['parents']['mother']['death_date']}]"
    if p['parents']['mother'].get('kept_maiden_name'):
        txt += " (сохранила девичью фамилию)"

    if p['parents']['father']:
        txt += f"\nОтец: {p['parents']['father']['name']} ({p['parents']['father']['age']} лет)"
        if p['parents']['father'].get('dead'):
            txt += f" [УМЕР {p['parents']['father']['death_date']}]"
    else:
        txt += f"\nОтец: ушел из семьи"

    if p['siblings']:
        txt += f"\n\nБратья/сестры:"
        for s in p['siblings']:
            txt += f"\n- {s['name']} ({s['age']} лет)"
            if s.get('dead'):
                txt += f" [{'УМЕР' if s['sex'] == 'm' else 'УМЕРЛА'} {s['death_date']}]"

    txt += "\n\n" + "-" * 60

    if p['parents']['mother'].get('work'):
        m = p['parents']['mother']
        txt += f"""\n\nМАТЬ ПОДРОБНО:
Работа: {m['work']['position']} в {m['work']['name']}
Зарплата: {m['work']['salary']:,} руб."""

    if p['parents']['father'] and p['parents']['father'].get('work'):
        f = p['parents']['father']
        txt += f"""\n\nОТЕЦ ПОДРОБНО:
Работа: {f['work']['position']} в {f['work']['name']}
Зарплата: {f['work']['salary']:,} руб."""

    print(create_gradient(txt))


gens = {
    '1': lambda: f_ru.name(),
    '2': lambda: f_ru.address(),
    '3': lambda: f_ru.phone_number(),
    '4': lambda: f_ru.date(),
    '5': lambda: f_ru.text(max_nb_chars=200),
    '6': lambda: f_ru.password(),
    '7': lambda: f_ru.url(),
    '8': lambda: f_ru.ipv4(),
    '9': lambda: f_ru.mac_address(),
    '10': lambda: f_ru.uuid4(),
    '11': lambda: f_ru.company(),
    '12': lambda: f_ru.job(),
    '13': lambda: f_ru.email(),
    '14': lambda: f_ru.city(),
    '15': lambda: f_ru.country(),
    '16': lambda: f_ru.currency_code(),
    '17': lambda: f_ru.hex_color(),
    '18': lambda: f_ru.user_agent(),
    '19': lambda: f_ru.credit_card_full(),
    '20': lambda: f"{f_ru.latitude()}, {f_ru.longitude()}",
    '21': lambda: f_ru.license_plate(),
    '22': lambda: r.choice(['Кот', 'Собака', 'Попугай', 'Хомяк', 'Рыбка']),
    '23': lambda: f_ru.word(),
    '24': lambda: f_ru.sentence(),
    '25': lambda: f_ru.paragraph(),
    '26': lambda: f_ru.iban(),
    '27': lambda: f_ru.bban(),
    '28': lambda: f_ru.businesses_inn(),
    '29': lambda: f'{r.randint(100, 999)}-{r.randint(100, 999)}-{r.randint(100, 999)} {r.randint(10, 99)}',
    '30': lambda: f'{r.randint(1000, 9999)} {r.randint(100000, 999999)}',
    '31': lambda: f_ru.ean13(),
    '32': lambda: f_ru.isbn13(),
    '33': lambda: f_ru.md5(),
    '34': lambda: f_ru.sha256(),
    '35': lambda: r.choice(['Сбербанк', 'ВТБ', 'Альфа-Банк', 'Тинькофф']),
    '36': lambda: f_ru.cryptocurrency_code(),
    '37': lambda: f_ru.programming_language(),
    '38': lambda: f_ru.file_name(),
    '39': lambda: f_ru.mime_type(),
    '40': lambda: f_ru.domain_name()
}


def main():
    while True:
        clr()
        print(create_gradient(banner))
        print(create_gradient(menu))

        cmd = input(create_gradient("\ngen@bruh $ "))

        if cmd == '0':
            break
        elif cmd == '50':
            clr()
            print(create_gradient(banner))
            p = gen_person_full()
            print_person(p)
            input(create_gradient("\n\nНажмите Enter для продолжения..."))
        elif cmd in gens:
            clr()
            print(create_gradient(banner))
            print(create_gradient(f"\nРезультат: {gens[cmd]()}"))
            input(create_gradient("\n\nНажмите Enter для продолжения..."))


if __name__ == "__main__":
    main()').decode('utf-8'))