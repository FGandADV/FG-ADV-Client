import base64;exec(base64.b64decode('import base64
import zlib
import marshal
import gzip
import pickle
import codecs
import re
import os
import lzma
from urllib.parse import unquote


def create_gradient(text, start_rgb=(255, 140, 0), end_rgb=(148, 0, 211)):
    lines, result = text.splitlines(), []
    for line in lines:
        colored_line = ""
        if line.strip():
            length = len(line)
            for i, char in enumerate(line):
                ratio = i / max(1, length - 1)
                r = int(start_rgb[0] * (1 - ratio) + end_rgb[0] * ratio)
                g = int(start_rgb[1] * (1 - ratio) + end_rgb[1] * ratio)
                b = int(start_rgb[2] * (1 - ratio) + end_rgb[2] * ratio)
                colored_line += f"\033[38;2;{r};{g};{b}m{char}\033[0m"
        else:
            colored_line = line
        result.append(colored_line)
    return "\n".join(result)


def b64_dec(data):
    try:
        return base64.b64decode(data).decode()
    except:
        return None


def rot13_dec(data):
    return codecs.decode(data, 'rot13')


def hex_dec(data):
    try:
        return bytes.fromhex(data.replace(' ', '')).decode()
    except:
        return None


def zlib_dec(data):
    try:
        return zlib.decompress(base64.b64decode(data)).decode()
    except:
        return None


def marshal_dec(data):
    try:
        return marshal.loads(base64.b64decode(data))
    except:
        return None


def exec_ext(data):
    m = re.findall(r'exec\([\'\"](.*?)[\'\"]\)', data)
    return m[0] if m else None


def eval_ext(data):
    m = re.findall(r'eval\([\'\"](.*?)[\'\"]\)', data)
    return m[0] if m else None


def lambda_ext(data):
    m = re.findall(r'lambda.*?:(.*)', data)
    return m[0] if m else None


def rev_str(data):
    return data[::-1]


def ascii_shift(data, s=1):
    return ''.join(chr(ord(c) - s) for c in data)


def xor_dec(data, k=42):
    try:
        return ''.join(chr(ord(c) ^ k) for c in data)
    except:
        return None


def pickle_dec(data):
    try:
        return pickle.loads(base64.b64decode(data))
    except:
        return None


def gzip_dec(data):
    try:
        return gzip.decompress(base64.b64decode(data)).decode()
    except:
        return None


def url_dec(data):
    return unquote(data)


def bin_dec(data):
    try:
        return ''.join(chr(int(data[i:i + 8], 2)) for i in range(0, len(data), 8))
    except:
        return None


def caesar_dec(data, s=3):
    return ''.join(chr((ord(c) - ord('a') - s) % 26 + ord('a')) if c.islower()
                   else chr((ord(c) - ord('A') - s) % 26 + ord('A')) if c.isupper()
    else c for c in data)


def atbash_dec(data):
    return ''.join(chr(ord('z') - ord(c) + ord('a')) if c.islower()
                   else chr(ord('Z') - ord(c) + ord('A')) if c.isupper()
    else c for c in data)


def unicode_dec(data):
    try:
        return data.encode().decode('unicode_escape')
    except:
        return None


def octal_dec(data):
    try:
        return ''.join(chr(int(x, 8)) for x in data.split('\\') if x)
    except:
        return None


def double_b64_dec(data):
    try:
        x = base64.b64decode(data).decode()
        return base64.b64decode(x).decode()
    except:
        return None


def rm_comments(data):
    return '\n'.join(l for l in data.split('\n') if not l.strip().startswith('#'))


def ext_strings(data):
    s = re.findall(r'[\'\"](.*?)[\'\"]', data)
    return '\n'.join(s) if s else None


def sub_dec(data):
    t = str.maketrans('zyxwvutsrqponmlkjihgfedcba', 'abcdefghijklmnopqrstuvwxyz')
    return data.translate(t)


def num_dec(data):
    return re.sub(r'\d+', lambda m: chr(int(m.group())), data)


def import_ext(data):
    i = re.findall(r'import\s+(\w+)', data)
    return '\n'.join(i) if i else None


def func_ext(data):
    f = re.findall(r'def\s+(\w+)', data)
    return '\n'.join(f) if f else None


def var_ext(data):
    v = re.findall(r'(\w+)\s*=', data)
    return '\n'.join(set(v)) if v else None


def clean_obf(data):
    data = re.sub(r'__.*?__', '', data)
    return re.sub(r'[A-Za-z]{20,}', 'VAR', data)


def enc_str_ext(data):
    p = [r'b64decode\([\'\"](.*?)[\'\"]\)', r'decode\([\'\"](.*?)[\'\"]\)', r'unhexlify\([\'\"](.*?)[\'\"]\)']
    for x in p:
        m = re.findall(x, data)
        if m: return m[0]
    return None


def rc4_dec(data, k="key"):
    try:
        s = list(range(256))
        j = 0
        for i in range(256):
            j = (j + s[i] + ord(k[i % len(k)])) % 256
            s[i], s[j] = s[j], s[i]
        i = j = 0
        r = []
        for c in data:
            i = (i + 1) % 256
            j = (j + s[i]) % 256
            s[i], s[j] = s[j], s[i]
            r.append(chr(ord(c) ^ s[(s[i] + s[j]) % 256]))
        return ''.join(r)
    except:
        return None


def zlib_only(data):
    try:
        return zlib.decompress(data.encode()).decode()
    except:
        return None


def b64_zlib(data):
    try:
        return zlib.decompress(base64.b64decode(data)).decode()
    except:
        return None


def rendy_dec(data):
    try:
        x = base64.b64decode(data)
        x = zlib.decompress(x)
        x = lzma.decompress(x)
        return marshal.loads(x)
    except:
        return None


def mzb_dec(data):
    try:
        x = base64.b64decode(data)
        x = zlib.decompress(x)
        return marshal.loads(x)
    except:
        return None


dec = {
    1: ("Base64", b64_dec), 2: ("ROT13", rot13_dec), 3: ("Hex", hex_dec),
    4: ("Zlib+Base64", zlib_dec), 5: ("Marshal+Base64", marshal_dec),
    6: ("Exec extract", exec_ext), 7: ("Eval extract", eval_ext),
    8: ("Lambda extract", lambda_ext), 9: ("Reverse string", rev_str),
    10: ("ASCII shift", ascii_shift), 11: ("XOR (key=42)", xor_dec),
    12: ("Pickle+Base64", pickle_dec), 13: ("Gzip+Base64", gzip_dec),
    14: ("URL decode", url_dec), 15: ("Binary decode", bin_dec),
    16: ("Caesar (shift=3)", caesar_dec), 17: ("Atbash cipher", atbash_dec),
    18: ("Unicode escape", unicode_dec), 19: ("Octal decode", octal_dec),
    20: ("Double Base64", double_b64_dec), 21: ("Remove comments", rm_comments),
    22: ("Extract strings", ext_strings), 23: ("Simple substitution", sub_dec),
    24: ("Number to char", num_dec), 25: ("Extract imports", import_ext),
    26: ("Extract functions", func_ext), 27: ("Extract variables", var_ext),
    28: ("Clean obfuscation", clean_obf), 29: ("Extract encoded", enc_str_ext),
    30: ("RC4 decode", rc4_dec), 31: ("Zlib", zlib_only),
    32: ("Base64+Zlib", b64_zlib), 33: ("Rendy(M+L+Z+B64)", rendy_dec),
    34: ("Marshal+Zlib+B64", mzb_dec)
}


def show_banner():
    banner = """
       ██████╗ ██████╗ ██╗   ██╗██╗  ██╗        
       ██╔══██╗██╔══██╗██║   ██║██║  ██║        
       ██████╔╝██████╔╝██║   ██║███████║        
       ██╔══██╗██╔══██╗██║   ██║██╔══██║        
       ██████╔╝██║  ██║╚██████╔╝██║  ██║        
       ╚═════╝ ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═╝        
                                         
       ██████╗ ███████╗ ██████╗ ██████╗ ███████╗
       ██╔══██╗██╔════╝██╔═══██╗██╔══██╗██╔════╝
       ██║  ██║█████╗  ██║   ██║██████╔╝█████╗  
       ██║  ██║██╔══╝  ██║   ██║██╔══██╗██╔══╝  
       ██████╔╝███████╗╚██████╔╝██████╔╝██║     
       ╚═════╝ ╚══════╝ ╚═════╝ ╚═════╝ ╚═╝     
                                        
            Bruh Deobfuscator v2.1
    """
    print(create_gradient(banner))


def show_menu():
    w = 46
    lines = []
    lines.append("╔" + "═" * w + "╗")
    lines.append("║" + "Coder: @FGBruh, subscribe @FGIADV".center(w) + "║")
    lines.append("╠" + "═" * w + "╣")
    lines.append("║ Basic Encodings:" + " " * (w - 17) + "║")

    for k in range(1, 13):
        s = f" {k:2d}. {dec[k][0]}"
        lines.append("║" + s + " " * (w - len(s)) + "║")

    lines.append("╠" + "═" * w + "╣")
    lines.append("║ Ciphers & Transforms:" + " " * (w - 22) + "║")

    for k in range(13, 25):
        s = f" {k:2d}. {dec[k][0]}"
        lines.append("║" + s + " " * (w - len(s)) + "║")

    lines.append("╠" + "═" * w + "╣")
    lines.append("║ Advanced & Extraction:" + " " * (w - 23) + "║")

    for k in range(25, 35):
        s = f" {k:2d}. {dec[k][0]}"
        lines.append("║" + s + " " * (w - len(s)) + "║")

    lines.append("╠" + "═" * w + "╣")
    lines.append("║  0. Exit" + " " * (w - 9) + "║")
    lines.append("╚" + "═" * w + "╝")

    print(create_gradient("\n".join(lines)))


def main():
    show_banner()
    while True:
        show_menu()
        try:
            ch = int(input("\nSelect: "))
            if ch == 0: break
            if ch not in dec:
                print("Invalid")
                continue

            fp = input("File path: ").strip()
            if not os.path.exists(fp):
                print("Not found")
                continue

            with open(fp, 'r', encoding='utf-8', errors='ignore') as f:
                data = f.read()

            name, decoder = dec[ch]
            print(f"\nApplying {name}...")

            res = decoder(data)
            if res:
                out = f"decoded_{ch}_{os.path.basename(fp)}"
                with open(out, 'w', encoding='utf-8') as f:
                    f.write(str(res))
                print(f"Saved: {out}")
            else:
                print("Failed")

        except (ValueError, KeyboardInterrupt):
            print("Invalid")
        except Exception as e:
            print(f"Error: {e}")


if __name__ == "__main__":
    main()').decode('utf-8'))