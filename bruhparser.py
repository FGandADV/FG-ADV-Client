import base64;exec(base64.b64decode('import requests
import os
import re
import time
import urllib.parse
import hashlib
import base64
from bs4 import BeautifulSoup


class FGADVParsBasic:
    def __init__(self):
        print("Bruh Parser Basic - Простой парсер для ознакомления йоу")
        self.session = requests.Session()
        self.downloaded_files = []
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Connection': 'keep-alive',
        }
        self.session.headers.update(self.headers)

    def download_file(self, url, folder, base_url, file_type="file"):
        try:
            if url.startswith('data:'):
                return self.save_base64_file(url, folder, file_type)

            if not url.startswith('http'):
                url = urllib.parse.urljoin(base_url, url)

            response = self.session.get(url, timeout=15)
            response.raise_for_status()

            filename = os.path.basename(urllib.parse.urlparse(url).path)
            if not filename or '.' not in filename:
                if file_type == 'image':
                    filename = f"image_{len(self.downloaded_files)}.jpg"
                elif file_type == 'css':
                    filename = f"style_{len(self.downloaded_files)}.css"
                elif file_type == 'js':
                    filename = f"script_{len(self.downloaded_files)}.js"
                else:
                    filename = f"file_{len(self.downloaded_files)}.bin"

            if file_type == 'image':
                subfolder = 'images'
            elif file_type == 'css':
                subfolder = 'css'
            elif file_type == 'js':
                subfolder = 'js'
            else:
                subfolder = 'files'

            resource_folder = os.path.join(folder, subfolder)
            os.makedirs(resource_folder, exist_ok=True)

            filepath = os.path.join(resource_folder, filename)

            with open(filepath, 'wb') as f:
                f.write(response.content)

            relative_path = os.path.join(subfolder, filename).replace('\\', '/')
            self.downloaded_files.append(relative_path)

            print(f"Скачан: {filename} - для ознакомления")
            return relative_path

        except Exception as e:
            print(f"Ошибка скачивания {url}: {e}")
            return None

    def save_base64_file(self, data_url, folder, file_type):
        try:
            header, data = data_url.split(',', 1)
            file_data = base64.b64decode(data)

            if 'png' in header:
                ext = '.png'
            elif 'jpg' in header or 'jpeg' in header:
                ext = '.jpg'
            elif 'gif' in header:
                ext = '.gif'
            else:
                ext = '.bin'

            filename = f"data_{file_type}_{hashlib.md5(data_url.encode()).hexdigest()[:6]}{ext}"

            if file_type == 'image':
                subfolder = 'images'
            else:
                subfolder = 'files'

            resource_folder = os.path.join(folder, subfolder)
            os.makedirs(resource_folder, exist_ok=True)

            filepath = os.path.join(resource_folder, filename)
            with open(filepath, 'wb') as f:
                f.write(file_data)

            return os.path.join(subfolder, filename).replace('\\', '/')
        except:
            return None

    def get_page_content(self, url):
        print(f"Получение страницы {url} - для ознакомления")

        try:
            response = self.session.get(url, timeout=20)
            response.raise_for_status()
            return response.text
        except Exception as e:
            print(f"Ошибка загрузки страницы: {e}")
            return None

    def extract_images(self, soup, folder, base_url):
        print("Скачивание изображений - для ознакомления")

        for img in soup.find_all('img'):
            img_url = img.get('src')
            if img_url:
                new_path = self.download_file(img_url, folder, base_url, 'image')
                if new_path:
                    img['src'] = new_path

    def extract_css(self, soup, folder, base_url):
        print("Скачивание CSS файлов - для ознакомления")

        for link in soup.find_all('link', rel='stylesheet'):
            css_url = link.get('href')
            if css_url:
                new_path = self.download_file(css_url, folder, base_url, 'css')
                if new_path:
                    link['href'] = new_path

    def extract_js(self, soup, folder, base_url):
        print("Скачивание JavaScript файлов - для ознакомления")

        for script in soup.find_all('script'):
            js_url = script.get('src')
            if js_url:
                new_path = self.download_file(js_url, folder, base_url, 'js')
                if new_path:
                    script['src'] = new_path

    def extract_basic_resources(self, soup, folder, base_url):
        print("Скачивание основных ресурсов - для ознакомления")

        for link in soup.find_all('link'):
            href = link.get('href')
            if href and ('icon' in str(link.get('rel', []))):
                new_path = self.download_file(href, folder, base_url, 'icon')
                if new_path:
                    link['href'] = new_path

    def get_title(self, soup):
        title_tag = soup.find('title')
        if title_tag and title_tag.get_text().strip():
            return title_tag.get_text().strip()

        h1_tag = soup.find('h1')
        if h1_tag and h1_tag.get_text().strip():
            return h1_tag.get_text().strip()

        return "Скопированный сайт"

    def parse_website(self, url, output_folder):
        print(f"Запуск простого парсинга {url} - для ознакомления")

        os.makedirs(output_folder, exist_ok=True)

        content = self.get_page_content(url)
        if not content:
            return False

        soup = BeautifulSoup(content, 'html.parser')

        title = self.get_title(soup)
        print(f"Парсинг сайта: {title}")

        self.extract_images(soup, output_folder, url)

        self.extract_css(soup, output_folder, url)

        self.extract_js(soup, output_folder, url)

        self.extract_basic_resources(soup, output_folder, url)

        with open(os.path.join(output_folder, 'index.html'), 'w', encoding='utf-8') as f:
            f.write("<!-- Простая копия сайта для ознакомления -->\n")
            f.write(str(soup.prettify()))

        with open(os.path.join(output_folder, 'info.txt'), 'w', encoding='utf-8') as f:
            f.write("Информация о парсинге - для ознакомления\n")
            f.write("-" * 30 + "\n")
            f.write(f"URL: {url}\n")
            f.write(f"Название: {title}\n")
            f.write(f"Время: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"Скачано файлов: {len(self.downloaded_files)}\n")
            f.write("\nПростой парсинг для ознакомления с сайтом\n")

        print(f"Парсинг завершен - результат в папке {output_folder}")
        return True


def main():
    print("=== Bruh Parser Basic - Простой парсер ===")
    print("Базовое копирование для ознакомления")

    parser = FGADVParsBasic()

    url = input("Введите URL сайта: ").strip()
    if not url.startswith(('http://', 'https://')):
        url = 'https://' + url

    domain = urllib.parse.urlparse(url).netloc.replace('www.', '')
    output_folder = f"basic_parse_{domain}_{int(time.time())}"

    success = parser.parse_website(url, output_folder)

    if success:
        print(f"\nПарсинг завершен!")
        print(f"Папка: {output_folder}")
        print(f"Файлов: {len(parser.downloaded_files)}")
        print("Материалы для ознакомления")
    else:
        print("Парсинг не удался")


if __name__ == "__main__":
    main()').decode('utf-8'))