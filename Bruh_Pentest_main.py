import base64;exec(base64.b64decode('import os
import sys
import time
import socket
import concurrent.futures
from datetime import datetime
from urllib.parse import urlparse
import json

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from BruhPentest.utils import clear_screen, display_banner, parse_url, get_random_user_agent
from BruhPentest.web_scanner import WebScanner
from BruhPentest.security_scanner import SecurityScanner
from BruhPentest.exploit_scanner import ExploitScanner


class PentestTool:
    def __init__(self):
        self.web_scanner = WebScanner()
        self.sec_scanner = SecurityScanner()
        self.exploit_scanner = ExploitScanner()

    def main_menu(self):
        while True:
            clear_screen()
            display_banner()
            print("[*] Главное меню:")
            print("  1. Указать URL")
            print("  2. Выход")
            choice = input("\n>>> ")

            if choice == "1":
                self.set_target_url()
            elif choice == "2":
                clear_screen()
                display_banner()
                print("[*] Выход из программы...")
                sys.exit(0)
            else:
                clear_screen()
                display_banner()
                print("[-] Неверный выбор. Попробуй еще раз.")
                input("\nЖми Enter для возврата...")

    def set_target_url(self):
        clear_screen()
        display_banner()
        print("[*] Введи URL сайта для анализа:")
        url = input(">>> ").strip()

        if not url:
            print("[-] URL не может быть пустым")
            input("\nЖми Enter для возврата...")
            return

        url = parse_url(url)
        self.run_analysis_menu(url)

    def run_analysis_menu(self, url):
        while True:
            clear_screen()
            display_banner()
            print(f"[*] Цель: {url}")
            print("[*] Выбери действие:")
            print("  1. Полный анализ")
            print("  2. Расширенное сканирование")
            print("  3. Назад")
            choice = input("\n>>> ")

            if choice == "1":
                self.full_analysis(url)
            elif choice == "2":
                self.advanced_scanning_menu(url)
            elif choice == "3":
                return
            else:
                print("[-] Неверный выбор")
                input("\nЖми Enter чтоб продолжить...")

    def full_analysis(self, url):
        clear_screen()
        display_banner()
        print(f"[*] Погнали анализировать {url}...\n")

        try:
            print(f"[*] Сканируем сайт...")
            scan_results = self.web_scanner.scan_website(url)

            server_info = scan_results.get("server_info", {})
            print("[+] Инфа о сервере:")
            print(f"  - Статус код: {server_info.get('status_code', 'Н/Д')}")
            print(f"  - Сервер: {server_info.get('server', 'Хз')}")
            print(f"  - Технология: {server_info.get('x_powered_by', 'Хз')}")
            print(f"  - Тип контента: {server_info.get('content_type', 'Хз')}")

            waf_detected = scan_results.get("waf_detected", False)
            print(f"\n[+] WAF: {'Обнаружен' if waf_detected else 'Не обнаружен'}")

            robots_txt = scan_results.get("robots_txt", [])
            if robots_txt:
                print("\n[+] Обнаружены пути в robots.txt:")
                for path in robots_txt[:10]:
                    print(f"  - {path}")
                if len(robots_txt) > 10:
                    print(f"  ... и еще {len(robots_txt) - 10} путей")

            print("\n[*] Открытые порты:")
            domain = urlparse(url).netloc.split(':')[0]
            ports = self.web_scanner.port_scan(domain)
            if ports:
                for port, service in ports.items():
                    print(f"  - Порт {port}: {service}")
            else:
                print("  - Открытых портов не найдено")

            print("\n[*] Найденные директории:")
            directories = scan_results.get("directories", [])
            if directories:
                for directory in directories[:10]:
                    print(f"  - {directory}")
                if len(directories) > 10:
                    print(f"  ... и еще {len(directories) - 10} директорий")
            else:
                print("  - Директории не найдены")

            print("\n[*] Найденные админки:")
            admin_panels = scan_results.get("admin_panels", [])
            if admin_panels:
                for panel in admin_panels:
                    print(f"  - {panel}")
            else:
                print("  - Админки не найдены")

            print("\n[*] Проверяем уязвимости...")
            vuln_results = self.sec_scanner.scan_vulnerabilities(url, scan_results)

            print("\n[+] Результаты сканирования уязвимостей:")
            for vuln_type, data in vuln_results.items():
                status = "УЯЗВИМО" if data.get("vulnerable", False) else "НЕ ОБНАРУЖЕНО"
                print(f"  - {vuln_type}: {status}")

        except Exception as e:
            print(f"[-] Всё полетело к чертям: {str(e)}")
        input("\nЖми Enter чтоб вернуться в меню...")

    def auto_exploit_vulnerabilities(self, url):
        clear_screen()
        display_banner()
        print(f"[*] Запускаем автоэксплойт для {url}...\n")
        try:
            scan_results = self.web_scanner.scan_website(url)
            vuln_results = self.sec_scanner.scan_vulnerabilities(url, scan_results)
            exploit_results = self.exploit_scanner.exploit_vulnerabilities(url, vuln_results)

            if not exploit_results:
                print("[-] Не получилось эксплуатировать уязвимости")
                return

            print("[+] Результаты автоэксплойта:")
            for result in exploit_results:
                vuln_type = result.get("vulnerability", "Unknown")
                payload = result.get("payload", "N/A")
                exploit_url = result.get("url", url)

                print(f"\n[+] Уязвимость: {vuln_type}")
                print(f"  URL: {exploit_url}")
                print(f"  Payload: {payload}")

                if vuln_type == "SQL Injection":
                    db_name = result.get("database", "Хз")
                    print(f"  База данных: {db_name}")
                elif vuln_type == "Remote Code Execution":
                    output = result.get("output", "")[:200]
                    print(f"  Вывод команды: {output}...")

        except Exception as e:
            print(f"[-] Ошибка при эксплуатации: {str(e)}")

    def advanced_scanning_menu(self, url):
        while True:
            clear_screen()
            display_banner()
            print(f"[*] Расширенное сканирование для {url}:")
            print("  1. Сканирование портов")
            print("  2. Поиск поддоменов")
            print("  3. DNS-инфа")
            print("  4. Анализ заголовков")
            print("  5. Анализ SSL/TLS")
            print("  6. Сканирование WAF")
            print("  7. Обнаружение технологий")
            print("  8. Листинг директорий")
            print("  9. Сканирование сайта")
            print(" 10. Сканирование WordPress")
            print(" 11. Анализ JS файлов")
            print(" 12. Поиск админок")
            print(" 13. Автоматический эксплойт")
            print(" 14. Назад")
            choice = input("\n>>> ")

            if choice == "1":
                self.scan_ports(url)
            elif choice == "2":
                self.enumerate_subdomains(url)
            elif choice == "3":
                self.dns_lookup(url)
            elif choice == "4":
                self.analyze_headers(url)
            elif choice == "5":
                self.analyze_ssl(url)
            elif choice == "6":
                self.scan_waf(url)
            elif choice == "7":
                self.detect_technologies(url)
            elif choice == "8":
                self.scan_directory_listing(url)
            elif choice == "9":
                self.crawl_website(url)
            elif choice == "10":
                self.scan_wordpress(url)
            elif choice == "11":
                self.analyze_javascript_files(url)
            elif choice == "12":
                self.scan_admin_panels(url)
            elif choice == "13":
                self.auto_exploit_vulnerabilities(url)
            elif choice == "14":
                return
            else:
                print("[-] Неверный выбор")
            input("\nЖми Enter чтоб продолжить...")

    def scan_ports(self, url):
        print(f"\n[*] Сканим порты для {url}...\n")

        try:
            domain = urlparse(url).netloc.split(':')[0]
            ports = self.web_scanner.port_scan(domain)

            if ports:
                print("[+] Результаты сканирования портов:")
                for port, service in ports.items():
                    print(f"  - Порт {port}: {service}")
            else:
                print("[-] Открытые порты не найдены")
        except Exception as e:
            print(f"[-] Ошибка при сканировании портов: {str(e)}")

    def enumerate_subdomains(self, url):
        print(f"\n[*] Ищем поддомены для {url}...\n")

        try:
            domain = urlparse(url).netloc.split(':')[0]
            subdomains = self.web_scanner.find_subdomains(domain)

            if subdomains:
                print("[+] Найденные поддомены:")
                for subdomain in subdomains:
                    print(f"  - {subdomain}")
            else:
                print("[-] Поддомены не найдены")
        except Exception as e:
            print(f"[-] Ошибка при поиске поддоменов: {str(e)}")

    def dns_lookup(self, url):
        print(f"\n[*] Запускаем DNS-поиск для {url}...\n")

        try:
            domain = urlparse(url).netloc.split(':')[0]
            dns_info = self.web_scanner.dns_lookup(domain)

            if dns_info:
                print("[+] DNS-инфа:")
                for record_type, records in dns_info.items():
                    if records:
                        print(f"  - {record_type}:")
                        for record in records:
                            print(f"    - {record}")
            else:
                print("[-] DNS-инфа не найдена")
        except Exception as e:
            print(f"[-] Ошибка при DNS-поиске: {str(e)}")

    def analyze_headers(self, url):
        print(f"\n[*] Анализируем заголовки для {url}...\n")

        try:
            headers_analysis = self.web_scanner.analyze_headers(url)

            if headers_analysis:
                print("[+] Анализ заголовков:")
                for header, value in headers_analysis.items():
                    print(f"  - {header}: {value}")
            else:
                print("[-] Не удалось получить заголовки")
        except Exception as e:
            print(f"[-] Ошибка при анализе заголовков: {str(e)}")

    def analyze_ssl(self, url):
        print(f"\n[*] Анализируем SSL/TLS для {url}...\n")

        try:
            ssl_analysis = self.web_scanner.analyze_ssl(url)

            if ssl_analysis:
                print("[+] Анализ SSL/TLS:")
                for key, value in ssl_analysis.items():
                    print(f"  - {key}: {value}")
            else:
                print("[-] SSL/TLS не настроен или недоступен")
        except Exception as e:
            print(f"[-] Ошибка при анализе SSL/TLS: {str(e)}")

    def scan_waf(self, url):
        print(f"\n[*] Сканируем WAF для {url}...\n")

        try:
            waf_info = self.web_scanner.scan_waf(url)

            if waf_info.get("detected", False):
                print("[+] WAF обнаружен:")
                print(f"  - Тип: {waf_info.get('type', 'Хз')}")
                print(f"  - Вендор: {waf_info.get('vendor', 'Хз')}")
            else:
                print("[-] WAF не обнаружен")
        except Exception as e:
            print(f"[-] Ошибка при сканировании WAF: {str(e)}")

    def detect_technologies(self, url):
        print(f"\n[*] Определяем технологии для {url}...\n")

        try:
            technologies = self.web_scanner.detect_technologies(url)

            if technologies:
                print("[+] Найденные технологии:")
                for category, techs in technologies.items():
                    print(f"  - {category}:")
                    for tech in techs:
                        print(f"    - {tech}")
            else:
                print("[-] Технологии не обнаружены")
        except Exception as e:
            print(f"[-] Ошибка при определении технологий: {str(e)}")

    def scan_directory_listing(self, url):
        print(f"\n[*] Проверяем листинг директорий для {url}...\n")

        try:
            directory_listing = self.web_scanner.scan_directory_listing(url)

            if directory_listing:
                print("[+] Обнаружен листинг директорий:")
                for directory in directory_listing:
                    print(f"  - {directory}")
            else:
                print("[-] Листинг директорий не обнаружен")
        except Exception as e:
            print(f"[-] Ошибка при проверке листинга директорий: {str(e)}")

    def crawl_website(self, url):
        print(f"\n[*] Сканируем веб-сайт для {url}...\n")

        try:
            crawl_results = self.web_scanner.crawl_website(url)

            if crawl_results:
                print("[+] Результаты сканирования:")

                if "urls" in crawl_results and crawl_results["urls"]:
                    print("  - Найденные URL:")
                    for found_url in crawl_results["urls"][:10]:
                        print(f"    - {found_url}")
                    if len(crawl_results["urls"]) > 10:
                        print(f"    ... и еще {len(crawl_results['urls']) - 10} URL")

                if "forms" in crawl_results and crawl_results["forms"]:
                    print("  - Найденные формы:")
                    for form in crawl_results["forms"][:5]:
                        print(f"    - {form['action']} ({form['method']})")
                    if len(crawl_results["forms"]) > 5:
                        print(f"    ... и еще {len(crawl_results['forms']) - 5} форм")
            else:
                print("[-] Результаты сканирования не найдены")
        except Exception as e:
            print(f"[-] Ошибка при сканировании веб-сайта: {str(e)}")

    def scan_wordpress(self, url):
        print(f"\n[*] Сканируем WordPress для {url}...\n")

        try:
            wp_results = self.web_scanner.scan_wordpress(url)

            if wp_results:
                print("[+] Результаты сканирования WordPress:")

                if "version" in wp_results:
                    print(f"  - Версия: {wp_results['version']}")

                if "themes" in wp_results and wp_results["themes"]:
                    print("  - Темы:")
                    for theme in wp_results["themes"]:
                        print(f"    - {theme}")

                if "plugins" in wp_results and wp_results["plugins"]:
                    print("  - Плагины:")
                    for plugin in wp_results["plugins"]:
                        print(f"    - {plugin}")

                if "users" in wp_results and wp_results["users"]:
                    print("  - Пользователи:")
                    for user in wp_results["users"]:
                        print(f"    - {user}")

                if "vulnerabilities" in wp_results and wp_results["vulnerabilities"]:
                    print("  - Уязвимости:")
                    for vuln in wp_results["vulnerabilities"]:
                        print(f"    - {vuln}")
            else:
                print("[-] WordPress не обнаружен или нет инфы")
        except Exception as e:
            print(f"[-] Ошибка при сканировании WordPress: {str(e)}")

    def analyze_javascript_files(self, url):
        print(f"\n[*] Анализируем JavaScript файлы для {url}...\n")

        try:
            js_files = self.web_scanner.find_js_files(url)

            if js_files:
                print("[+] Найденные JavaScript файлы:")
                for js_file in js_files[:10]:
                    print(f"  - {js_file}")
                if len(js_files) > 10:
                    print(f"  ... и еще {len(js_files) - 10} файлов")

                print("\n[*] Извлекаем скрытые эндпоинты...")
                endpoints = self.web_scanner.extract_hidden_endpoints(js_files)

                if endpoints:
                    print("[+] Найденные эндпоинты:")
                    for endpoint in endpoints[:10]:
                        print(f"  - {endpoint}")
                    if len(endpoints) > 10:
                        print(f"  ... и еще {len(endpoints) - 10} эндпоинтов")
                else:
                    print("[-] Эндпоинты не найдены")
            else:
                print("[-] JavaScript файлы не найдены")
        except Exception as e:
            print(f"[-] Ошибка при анализе JavaScript файлов: {str(e)}")

    def scan_admin_panels(self, url):
        print(f"\n[*] Ищем админки для {url}...\n")

        try:
            admin_panels = self.web_scanner.find_admin_panels(url)

            if admin_panels:
                print("[+] Найденные админки:")
                for panel in admin_panels:
                    print(f"  - {panel}")
            else:
                print("[-] Админки не найдены")
        except Exception as e:
            print(f"[-] Ошибка при поиске админок: {str(e)}")

    def scan_vulns(self):
        clear_screen()
        display_banner()

        print("[*] Введи URL сайта для сканирования:")
        url = input(">>> ")

        if not url:
            print("[-] URL не может быть пустым")
            input("\nЖми Enter чтоб вернуться...")
            return

        url = parse_url(url)

        print(f"\n[*] Сканируем уязвимости для {url}...\n")

        web_scanner = WebScanner()
        scan_results = web_scanner.scan_website(url)

        security_scanner = SecurityScanner()
        vuln_results = security_scanner.scan_vulnerabilities(url, scan_results)

        print("\n[+] Результаты сканирования уязвимостей:")

        for vuln_type, data in vuln_results.items():
            if vuln_type in ["ssl_check", "headers_check", "cookies_check"]:
                status = "НЕ ОБНАРУЖЕНО" if data.get("secure", False) else "УЯЗВИМО"
            else:
                status = "УЯЗВИМО" if data.get("vulnerable", False) else "НЕ ОБНАРУЖЕНО"

            print(f"  - {vuln_type}: {status}")

        print("\n[*] Хочешь сгенерить отчет? (y/n)")
        generate_report = input(">>> ").lower() == 'y'

        if generate_report:
            print("\n[*] Выбери формат отчета:")
            print("  1. Текст")
            print("  2. HTML")
            print("  3. JSON")

            report_format = input(">>> ")

            if report_format == "1":
                self.generate_text_report(url, scan_results, vuln_results)
            elif report_format == "2":
                self.generate_html_report(url, scan_results, vuln_results)
            elif report_format == "3":
                self.generate_json_report(url, scan_results, vuln_results)
            else:
                print("[-] Неверный выбор формата")

        print("\n[*] Хочешь сгенерить эксплойты? (y/n)")
        generate_exploits = input(">>> ").lower() == 'y'

        if generate_exploits:
            exploit_scanner = ExploitScanner()
            exploits = exploit_scanner.exploit_vulnerabilities(url, vuln_results)

            if exploits:
                print("\n[+] Сгенерированные эксплойты:")
                for exploit in exploits:
                    print(f"  - {exploit['vulnerability']}: {exploit.get('url', url)}")

                print("\n[*] Сохранить эксплойты? (y/n)")
                save_exploits = input(">>> ").lower() == 'y'

                if save_exploits:
                    self.save_exploits(url, exploits)
            else:
                print("\n[-] Не получилось сгенерить эксплойты")

        input("\nЖми Enter чтоб вернуться...")

    def generate_text_report(self, url, scan_results, vuln_results):
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"report_{urlparse(url).netloc}_{timestamp}.txt"

        with open(filename, "w", encoding="utf-8") as f:
            f.write(f"Отчет о сканировании для {url}\n")
            f.write(f"Дата: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")

            f.write("Инфа о сервере:\n")
            server_info = scan_results.get("server_info", {})
            f.write(f"  - Статус код: {server_info.get('status_code', 'Н/Д')}\n")
            f.write(f"  - Сервер: {server_info.get('server', 'Хз')}\n")
            f.write(f"  - Технология: {server_info.get('x_powered_by', 'Хз')}\n")
            f.write(f"  - Тип контента: {server_info.get('content_type', 'Хз')}\n\n")

            f.write("Обнаруженные уязвимости:\n")
            for vuln_type, data in vuln_results.items():
                if vuln_type in ["ssl_check", "headers_check", "cookies_check"]:
                    status = "НЕ ОБНАРУЖЕНО" if data.get("secure", False) else "УЯЗВИМО"
                else:
                    status = "УЯЗВИМО" if data.get("vulnerable", False) else "НЕ ОБНАРУЖЕНО"

                f.write(f"  - {vuln_type}: {status}\n")

                if vuln_type == "ssl_check" and not data.get("secure", False):
                    f.write("    Проблемы SSL:\n")
                    for issue in data.get("issues", []):
                        f.write(f"    - {issue}\n")

                if vuln_type == "headers_check" and not data.get("secure", False):
                    f.write("    Отсутствующие заголовки безопасности:\n")
                    for header in data.get("missing", []):
                        f.write(f"    - {header}\n")

                    f.write("    Слабые заголовки безопасности:\n")
                    for header in data.get("weak", []):
                        f.write(f"    - {header}\n")

                if vuln_type in ["sql_injection", "xss", "open_redirect", "lfi", "rce"] and data.get("vulnerable",
                                                                                                     False):
                    f.write("    Уязвимые точки:\n")
                    for endpoint in data.get("endpoints", []):
                        f.write(f"    - URL: {endpoint.get('url', 'Н/Д')}\n")
                        f.write(f"      Параметр: {endpoint.get('param', 'Н/Д')}\n")
                        f.write(f"      Payload: {endpoint.get('payload', 'Н/Д')}\n")

            f.write("\nНайденные ресурсы:\n")

            if "directories" in scan_results and scan_results["directories"]:
                f.write("  Директории:\n")
                for directory in scan_results["directories"]:
                    f.write(f"  - {directory}\n")

            if "admin_panels" in scan_results and scan_results["admin_panels"]:
                f.write("  Админки:\n")
                for panel in scan_results["admin_panels"]:
                    f.write(f"  - {panel}\n")

            if "sensitive_files" in scan_results and scan_results["sensitive_files"]:
                f.write("  Сенситивные файлы:\n")
                for file in scan_results["sensitive_files"]:
                    f.write(f"  - {file}\n")

            if "subdomains" in scan_results and scan_results["subdomains"]:
                f.write("  Поддомены:\n")
                for subdomain in scan_results["subdomains"]:
                    f.write(f"  - {subdomain}\n")

        print(f"\n[+] Отчет сохранен в {filename}")

    def generate_html_report(self, url, scan_results, vuln_results):
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"report_{urlparse(url).netloc}_{timestamp}.html"

        html_content = f"""<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Отчет о сканировании для {url}</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 0; padding: 20px; }}
        h1 {{ color: #333; }}
        h2 {{ color: #555; margin-top: 20px; }}
        .container {{ max-width: 1000px; margin: 0 auto; }}
        .info-section {{ margin-bottom: 30px; }}
        .vuln-item {{ margin-bottom: 10px; padding: 10px; border-radius: 5px; }}
        .vulnerable {{ background-color: #ffe6e6; }}
        .secure {{ background-color: #e6ffe6; }}
        .endpoints {{ margin-left: 20px; }}
        .endpoint {{ background-color: #f9f9f9; padding: 10px; margin-top: 10px; border-radius: 5px; }}
    </style>
</head>
<body>
    <div class="container">
        <h1>Отчет о сканировании</h1>
        <div class="info-section">
            <h2>Общая инфа</h2>
            <p><strong>URL:</strong> {url}</p>
            <p><strong>Дата:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>

            <h3>Инфа о сервере</h3>"""

        server_info = scan_results.get("server_info", {})
        html_content += f"""
            <p><strong>Статус код:</strong> {server_info.get('status_code', 'Н/Д')}</p>
            <p><strong>Сервер:</strong> {server_info.get('server', 'Хз')}</p>
            <p><strong>Технология:</strong> {server_info.get('x_powered_by', 'Хз')}</p>
            <p><strong>Тип контента:</strong> {server_info.get('content_type', 'Хз')}</p>

            <p><strong>WAF обнаружен:</strong> {'Да' if scan_results.get('waf_detected', False) else 'Нет'}</p>
        </div>

        <div class="info-section">
            <h2>Результаты проверки безопасности</h2>"""

        for vuln_type, data in vuln_results.items():
            if vuln_type in ["ssl_check", "headers_check", "cookies_check"]:
                is_secure = data.get('secure', False)
                status = "НЕ ОБНАРУЖЕНО" if is_secure else "УЯЗВИМО"
                html_class = "secure" if is_secure else "vulnerable"
            else:
                is_vulnerable = data.get('vulnerable', False)
                status = "УЯЗВИМО" if is_vulnerable else "НЕ ОБНАРУЖЕНО"
                html_class = "vulnerable" if is_vulnerable else "secure"

            html_content += f"""
            <div class="vuln-item {html_class}">
                <h3>{vuln_type}: {status}</h3>"""

            if vuln_type == "ssl_check" and not data.get('secure', False):
                html_content += """
                <p><strong>Проблемы SSL:</strong></p>
                <ul>"""
                for issue in data.get("issues", []):
                    html_content += f"""
                    <li>{issue}</li>"""
                html_content += """
                </ul>"""

            if vuln_type == "headers_check" and not data.get('secure', False):
                html_content += """
                <p><strong>Отсутствующие заголовки безопасности:</strong></p>
                <ul>"""
                for header in data.get("missing", []):
                    html_content += f"""
                    <li>{header}</li>"""
                html_content += """
                </ul>
                <p><strong>Слабые заголовки безопасности:</strong></p>
                <ul>"""
                for header in data.get("weak", []):
                    html_content += f"""
                    <li>{header}</li>"""
                html_content += """
                </ul>"""

            if vuln_type in ["sql_injection", "xss", "open_redirect", "lfi", "rce"] and data.get("vulnerable", False):
                html_content += """
                <div class="endpoints">
                    <p><strong>Уязвимые точки:</strong></p>"""
                for endpoint in data.get("endpoints", []):
                    html_content += f"""
                    <div class="endpoint">
                        <p><strong>URL:</strong> {endpoint.get('url', 'Н/Д')}</p>
                        <p><strong>Параметр:</strong> {endpoint.get('param', 'Н/Д')}</p>
                        <p><strong>Payload:</strong> {endpoint.get('payload', 'Н/Д')}</p>
                    </div>"""
                html_content += """
                </div>"""

            html_content += """
            </div>"""

        html_content += """
        </div>

        <div class="info-section">
            <h2>Найденные ресурсы</h2>"""

        if "directories" in scan_results and scan_results["directories"]:
            html_content += """
            <h3>Директории</h3>
            <ul>"""
            for directory in scan_results["directories"]:
                html_content += f"""
                <li>{directory}</li>"""
            html_content += """
            </ul>"""

        if "admin_panels" in scan_results and scan_results["admin_panels"]:
            html_content += """
            <h3>Админки</h3>
            <ul>"""
            for panel in scan_results["admin_panels"]:
                html_content += f"""
                <li>{panel}</li>"""
            html_content += """
            </ul>"""

        if "sensitive_files" in scan_results and scan_results["sensitive_files"]:
            html_content += """
            <h3>Сенситивные файлы</h3>
            <ul>"""
            for file in scan_results["sensitive_files"]:
                html_content += f"""
                <li>{file}</li>"""
            html_content += """
            </ul>"""

        if "subdomains" in scan_results and scan_results["subdomains"]:
            html_content += """
            <h3>Поддомены</h3>
            <ul>"""
            for subdomain in scan_results["subdomains"]:
                html_content += f"""
                <li>{subdomain}</li>"""
            html_content += """
            </ul>"""

        html_content += """
        </div>
    </div>
</body>
</html>"""

        with open(filename, "w", encoding="utf-8") as f:
            f.write(html_content)

        print(f"\n[+] Отчет сохранен в {filename}")

    def generate_json_report(self, url, scan_results, vuln_results):
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"report_{urlparse(url).netloc}_{timestamp}.json"

        report = {
            "url": url,
            "scan_date": datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            "server_info": scan_results.get("server_info", {}),
            "vulnerabilities": vuln_results,
            "resources": {
                "directories": scan_results.get("directories", []),
                "admin_panels": scan_results.get("admin_panels", []),
                "sensitive_files": scan_results.get("sensitive_files", []),
                "subdomains": scan_results.get("subdomains", [])
            }
        }

        with open(filename, "w", encoding="utf-8") as f:
            json.dump(report, f, indent=4, ensure_ascii=False)

        print(f"\n[+] Отчет сохранен в {filename}")

    def save_exploits(self, url, exploits):
        domain = urlparse(url).netloc
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        directory = f"exploits_{domain}_{timestamp}"

        os.makedirs(directory, exist_ok=True)

        for i, exploit in enumerate(exploits):
            vuln_type = exploit["vulnerability"].lower().replace(" ", "_")
            filename = f"{directory}/{vuln_type}_exploit.py"

            with open(filename, "w", encoding="utf-8") as f:
                if "poc" in exploit:
                    f.write(exploit["poc"])
                else:
                    f.write(self.exploit_scanner.generate_generic_poc(url, exploit["vulnerability"]))

        print(f"\n[+] Эксплойты сохранены в {directory}")

    def generate_exploits(self):
        clear_screen()
        display_banner()

        print("[*] Введи URL сайта для генерации эксплойтов:")
        url = input(">>> ")

        if not url:
            print("[-] URL не может быть пустым")
            input("\nЖми Enter чтоб вернуться...")
            return

        url = parse_url(url)

        print(f"\n[*] Сканируем уязвимости для {url}...\n")

        web_scanner = WebScanner()
        scan_results = web_scanner.scan_website(url)

        security_scanner = SecurityScanner()
        vuln_results = security_scanner.scan_vulnerabilities(url, scan_results)

        print("\n[*] Генерируем эксплойты...")

        exploit_scanner = ExploitScanner()
        exploits = exploit_scanner.exploit_vulnerabilities(url, vuln_results)

        if exploits:
            print("\n[+] Сгенерированные эксплойты:")
            for exploit in exploits:
                print(f"  - {exploit['vulnerability']}: {exploit.get('url', url)}")

            print("\n[*] Сохранить эксплойты? (y/n)")
            save_exploits = input(">>> ").lower() == 'y'

            if save_exploits:
                self.save_exploits(url, exploits)
        else:
            print("\n[-] Не удалось сгенерировать эксплойты")

        input("\nЖми Enter чтоб вернуться...")


def main():
    try:
        tool = PentestTool()
        tool.main_menu()
    except KeyboardInterrupt:
        print("\n\n[*] Выход из программы...")
        sys.exit(0)
    except Exception as e:
        print(f"\n[-] Ошибка: {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    main()').decode('utf-8'))